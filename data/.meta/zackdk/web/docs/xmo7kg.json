{
  "id": 1337728,
  "slug": "xmo7kg",
  "title": "JS里各种循环总结",
  "book_id": 231593,
  "book": {
    "id": 231593,
    "type": "Book",
    "slug": "web",
    "name": "WEB",
    "user_id": 284138,
    "description": "前端知识点记录",
    "creator_id": 284138,
    "public": 1,
    "items_count": 58,
    "likes_count": 0,
    "watches_count": 3,
    "content_updated_at": "2023-02-02T09:09:21.426Z",
    "updated_at": "2023-02-02T09:09:21.000Z",
    "created_at": "2019-03-07T05:05:08.000Z",
    "namespace": "zackdk/web",
    "user": {
      "id": 284138,
      "type": "User",
      "login": "zackdk",
      "name": "行一度空山",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
      "books_count": 2,
      "public_books_count": 1,
      "followers_count": 5,
      "following_count": 0,
      "created_at": "2019-03-07T05:02:38.000Z",
      "updated_at": "2023-02-01T12:18:25.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 284138,
  "creator": {
    "id": 284138,
    "type": "User",
    "login": "zackdk",
    "name": "行一度空山",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
    "books_count": 2,
    "public_books_count": 1,
    "followers_count": 5,
    "following_count": 0,
    "created_at": "2019-03-07T05:02:38.000Z",
    "updated_at": "2023-02-01T12:18:25.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "这篇文章起源于一道面试题，找出一个字符串中，出现次数最多的字符。面试题不难,正常思路是遍历字符串，统计下字符个数，再排个序，找出最大的。<br />可是可是，好久没手写代码的我，写不来for循环了，平时太依赖自动提示了，依赖调试工具了，都是写错了，然后看报错信息然后改就行。所以所以有了这篇文章。\n<a name=\"9e260d4a\"></a>\n## 普通for循环\n\n普通for循环可 遍历** 数组** **字符串**。\n\n```javascript\n//遍历数组\nlet array = [1,2,3];\nfor(let i =0; i<array.length; i++){\n   const value = array[i];\n   console.log(value);\n}\n//遍历字符串\nlet str = \"hello zack!\";\nfor(let i =0; i<str.length; i++){\n   const value = str[i];\n   console.log(value);\n}\n```\n\n<a name=\"c6ef0d10\"></a>\n## for...in遍历\n\nfor...in可用于遍历**字符串**，**对象**，**数组**\n\n```javascript\n//遍历数组\nlet array = [1,2,3];\nfor(let i in array){\n   const value = array[i];\n   console.log(value);\n}\n//遍历字符串\nlet str = \"hello zack!\";\nfor(let i in str){\n   const value = str[i];\n   console.log(value);\n}\n//遍历对象\nlet obj={name:\"zack\",age:24};\nfor(let i in obj){\n   const value = obj[i];\n   console.log(value);\n}\n```\n\n<a name=\"00b9902a\"></a>\n## forEach 遍历\n\nforEach在ES6之前是数组特有的方法，只能用于遍历数组。ES6之后，新增了Set和Map数据解构，也带有forEach方法。\n\n```javascript\n//遍历数组\nlet array = [1,2,3,4];\narray.forEach(function(value){\n   console.log(value);\n})\n//遍历Set\nlet array = [1,2,3,4];\nlet set = new Set(array);\nset.forEach(function(value){\n   console.log(value);\n})\n//遍历Map\nlet map= new Map([[\"a\",{}],[\"b\",\"sss\"],[\"c\",222]]);\nmap.forEach(function(value,key){\n   console.log(key+\"==\"+value);\n})\n```\n\n<a name=\"ffb76f6a\"></a>\n## for...of ES6新增\n\nfor...of 用于遍历部署了迭代器接口`Symbol.iterator`的数据解构。<br />ES6以后部署了迭代器接口的数据解构有，数组，字符串，Set，Map。对象是没有这个接口的，也就是说for...of不能用于遍历对象。\n\n```javascript\n//遍历字符串\nlet str =\"string\";\nfor(let v of str){\n   console.log(v);\n}\n//遍历数组\nlet array = [1,2,3,4];\nfor(let v of array){\n   console.log(v);\n}\n//遍历Set\nlet array = [1,2,3,4];\nlet set = new Set(array);\nfor(let v of set ){\n   console.log(v);\n}\n//遍历Map\nlet map= new Map([[\"a\",{}],[\"b\",\"sss\"],[\"c\",222]]);\nfor(let v of map){\n   console.log(v[0]+\":\"+v[1]);\n}\n//利用解构直接获取key，value\nfor(let [key,value] of map){\n   console.log(key+\":\"+value);\n}\nfor(let v of map.keys()){\n   console.log(v);\n}\nfor(let v of map.values()){\n   console.log(v);\n}\n```\n\n通过一些操作也是可以遍历对象的，可以选择手动给对象添加一个迭代器接口，或者是把对象转换为其它数据结构。\n\n```javascript\n//通过Object.valuse 获取对象的所有值。\nlet obj={name:\"zack\",age:24};\nfor(let v of Object.values(obj)){\n   console.log(v);\n}\n```\n\n<a name=\"c4bb1b6c\"></a>\n## 最后给出开始那道面试题的参考。\n\n```javascript\nfunction findMax(str){\n   //统计字符\n   let count = {};\n   for(let char of str){\n       if(count[char] == null){\n           count[char]=1;\n       }else{\n           count[char]++;\n       }\n   }\n   //排序\n   let res = Object.entries(count).sort((a,b)=>{\n       return b[1]-a[1];\n   })\n   \n   return res[0];\n}\n```\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><p>这篇文章起源于一道面试题，找出一个字符串中，出现次数最多的字符。面试题不难,正常思路是遍历字符串，统计下字符个数，再排个序，找出最大的。</p><p>可是可是，好久没手写代码的我，写不来for循环了，平时太依赖自动提示了，依赖调试工具了，都是写错了，然后看报错信息然后改就行。所以所以有了这篇文章。</p><h2 id=\"9e260d4a\">普通for循环</h2><p><br /></p><p>普通for循环可 遍历<strong> 数组</strong> <strong>字符串</strong>。</p><p><br /></p><pre data-lang=\"javascript\"><code>//遍历数组\nlet array = [1,2,3];\nfor(let i =0; i&lt;array.length; i++){\n   const value = array[i];\n   console.log(value);\n}\n//遍历字符串\nlet str = &quot;hello zack!&quot;;\nfor(let i =0; i&lt;str.length; i++){\n   const value = str[i];\n   console.log(value);\n}</code></pre><p><br /></p><h2 id=\"c6ef0d10\">for...in遍历</h2><p><br /></p><p>for...in可用于遍历<strong>字符串</strong>，<strong>对象</strong>，<strong>数组</strong></p><p><br /></p><pre data-lang=\"javascript\"><code>//遍历数组\nlet array = [1,2,3];\nfor(let i in array){\n   const value = array[i];\n   console.log(value);\n}\n//遍历字符串\nlet str = &quot;hello zack!&quot;;\nfor(let i in str){\n   const value = str[i];\n   console.log(value);\n}\n//遍历对象\nlet obj={name:&quot;zack&quot;,age:24};\nfor(let i in obj){\n   const value = obj[i];\n   console.log(value);\n}</code></pre><p><br /></p><h2 id=\"00b9902a\">forEach 遍历</h2><p><br /></p><p>forEach在ES6之前是数组特有的方法，只能用于遍历数组。ES6之后，新增了Set和Map数据解构，也带有forEach方法。</p><p><br /></p><pre data-lang=\"javascript\"><code>//遍历数组\nlet array = [1,2,3,4];\narray.forEach(function(value){\n   console.log(value);\n})\n//遍历Set\nlet array = [1,2,3,4];\nlet set = new Set(array);\nset.forEach(function(value){\n   console.log(value);\n})\n//遍历Map\nlet map= new Map([[&quot;a&quot;,{}],[&quot;b&quot;,&quot;sss&quot;],[&quot;c&quot;,222]]);\nmap.forEach(function(value,key){\n   console.log(key+&quot;==&quot;+value);\n})</code></pre><p><br /></p><h2 id=\"ffb76f6a\">for...of ES6新增</h2><p><br /></p><p>for...of 用于遍历部署了迭代器接口<code>Symbol.iterator</code>的数据解构。</p><p>ES6以后部署了迭代器接口的数据解构有，数组，字符串，Set，Map。对象是没有这个接口的，也就是说for...of不能用于遍历对象。</p><p><br /></p><pre data-lang=\"javascript\"><code>//遍历字符串\nlet str =&quot;string&quot;;\nfor(let v of str){\n   console.log(v);\n}\n//遍历数组\nlet array = [1,2,3,4];\nfor(let v of array){\n   console.log(v);\n}\n//遍历Set\nlet array = [1,2,3,4];\nlet set = new Set(array);\nfor(let v of set ){\n   console.log(v);\n}\n//遍历Map\nlet map= new Map([[&quot;a&quot;,{}],[&quot;b&quot;,&quot;sss&quot;],[&quot;c&quot;,222]]);\nfor(let v of map){\n   console.log(v[0]+&quot;:&quot;+v[1]);\n}\n//利用解构直接获取key，value\nfor(let [key,value] of map){\n   console.log(key+&quot;:&quot;+value);\n}\nfor(let v of map.keys()){\n   console.log(v);\n}\nfor(let v of map.values()){\n   console.log(v);\n}</code></pre><p><br /></p><p>通过一些操作也是可以遍历对象的，可以选择手动给对象添加一个迭代器接口，或者是把对象转换为其它数据结构。</p><p><br /></p><pre data-lang=\"javascript\"><code>//通过Object.valuse 获取对象的所有值。\nlet obj={name:&quot;zack&quot;,age:24};\nfor(let v of Object.values(obj)){\n   console.log(v);\n}</code></pre><p><br /></p><h2 id=\"c4bb1b6c\">最后给出开始那道面试题的参考。</h2><p><br /></p><pre data-lang=\"javascript\"><code>function findMax(str){\n   //统计字符\n   let count = {};\n   for(let char of str){\n       if(count[char] == null){\n           count[char]=1;\n       }else{\n           count[char]++;\n       }\n   }\n   //排序\n   let res = Object.entries(count).sort((a,b)=&gt;{\n       return b[1]-a[1];\n   })\n   \n   return res[0];\n}</code></pre><p><br /></p>",
  "body_lake": "<!doctype lake><p>这篇文章起源于一道面试题，找出一个字符串中，出现次数最多的字符。面试题不难,正常思路是遍历字符串，统计下字符个数，再排个序，找出最大的。</p><p>可是可是，好久没手写代码的我，写不来for循环了，平时太依赖自动提示了，依赖调试工具了，都是写错了，然后看报错信息然后改就行。所以所以有了这篇文章。</p><h2 id=\"9e260d4a\">普通for循环</h2><p><br /></p><p>普通for循环可 遍历<strong> 数组</strong> <strong>字符串</strong>。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%5Cnlet%20array%20%3D%20%5B1%2C2%2C3%5D%3B%5Cnfor(let%20i%20%3D0%3B%20i%3Carray.length%3B%20i%2B%2B)%7B%5Cn%20%20%20const%20value%20%3D%20array%5Bi%5D%3B%5Cn%20%20%20console.log(value)%3B%5Cn%7D%5Cn%2F%2F%E9%81%8D%E5%8E%86%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnlet%20str%20%3D%20%5C%22hello%20zack!%5C%22%3B%5Cnfor(let%20i%20%3D0%3B%20i%3Cstr.length%3B%20i%2B%2B)%7B%5Cn%20%20%20const%20value%20%3D%20str%5Bi%5D%3B%5Cn%20%20%20console.log(value)%3B%5Cn%7D%22%7D\"></card><p><br /></p><h2 id=\"c6ef0d10\">for...in遍历</h2><p><br /></p><p>for...in可用于遍历<strong>字符串</strong>，<strong>对象</strong>，<strong>数组</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%5Cnlet%20array%20%3D%20%5B1%2C2%2C3%5D%3B%5Cnfor(let%20i%20in%20array)%7B%5Cn%20%20%20const%20value%20%3D%20array%5Bi%5D%3B%5Cn%20%20%20console.log(value)%3B%5Cn%7D%5Cn%2F%2F%E9%81%8D%E5%8E%86%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnlet%20str%20%3D%20%5C%22hello%20zack!%5C%22%3B%5Cnfor(let%20i%20in%20str)%7B%5Cn%20%20%20const%20value%20%3D%20str%5Bi%5D%3B%5Cn%20%20%20console.log(value)%3B%5Cn%7D%5Cn%2F%2F%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%5Cnlet%20obj%3D%7Bname%3A%5C%22zack%5C%22%2Cage%3A24%7D%3B%5Cnfor(let%20i%20in%20obj)%7B%5Cn%20%20%20const%20value%20%3D%20obj%5Bi%5D%3B%5Cn%20%20%20console.log(value)%3B%5Cn%7D%22%7D\"></card><p><br /></p><h2 id=\"00b9902a\">forEach 遍历</h2><p><br /></p><p>forEach在ES6之前是数组特有的方法，只能用于遍历数组。ES6之后，新增了Set和Map数据解构，也带有forEach方法。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%5Cnlet%20array%20%3D%20%5B1%2C2%2C3%2C4%5D%3B%5Cnarray.forEach(function(value)%7B%5Cn%20%20%20console.log(value)%3B%5Cn%7D)%5Cn%2F%2F%E9%81%8D%E5%8E%86Set%5Cnlet%20array%20%3D%20%5B1%2C2%2C3%2C4%5D%3B%5Cnlet%20set%20%3D%20new%20Set(array)%3B%5Cnset.forEach(function(value)%7B%5Cn%20%20%20console.log(value)%3B%5Cn%7D)%5Cn%2F%2F%E9%81%8D%E5%8E%86Map%5Cnlet%20map%3D%20new%20Map(%5B%5B%5C%22a%5C%22%2C%7B%7D%5D%2C%5B%5C%22b%5C%22%2C%5C%22sss%5C%22%5D%2C%5B%5C%22c%5C%22%2C222%5D%5D)%3B%5Cnmap.forEach(function(value%2Ckey)%7B%5Cn%20%20%20console.log(key%2B%5C%22%3D%3D%5C%22%2Bvalue)%3B%5Cn%7D)%22%7D\"></card><p><br /></p><h2 id=\"ffb76f6a\">for...of ES6新增</h2><p><br /></p><p>for...of 用于遍历部署了迭代器接口<code>Symbol.iterator</code>的数据解构。</p><p>ES6以后部署了迭代器接口的数据解构有，数组，字符串，Set，Map。对象是没有这个接口的，也就是说for...of不能用于遍历对象。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E9%81%8D%E5%8E%86%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnlet%20str%20%3D%5C%22string%5C%22%3B%5Cnfor(let%20v%20of%20str)%7B%5Cn%20%20%20console.log(v)%3B%5Cn%7D%5Cn%2F%2F%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%5Cnlet%20array%20%3D%20%5B1%2C2%2C3%2C4%5D%3B%5Cnfor(let%20v%20of%20array)%7B%5Cn%20%20%20console.log(v)%3B%5Cn%7D%5Cn%2F%2F%E9%81%8D%E5%8E%86Set%5Cnlet%20array%20%3D%20%5B1%2C2%2C3%2C4%5D%3B%5Cnlet%20set%20%3D%20new%20Set(array)%3B%5Cnfor(let%20v%20of%20set%20)%7B%5Cn%20%20%20console.log(v)%3B%5Cn%7D%5Cn%2F%2F%E9%81%8D%E5%8E%86Map%5Cnlet%20map%3D%20new%20Map(%5B%5B%5C%22a%5C%22%2C%7B%7D%5D%2C%5B%5C%22b%5C%22%2C%5C%22sss%5C%22%5D%2C%5B%5C%22c%5C%22%2C222%5D%5D)%3B%5Cnfor(let%20v%20of%20map)%7B%5Cn%20%20%20console.log(v%5B0%5D%2B%5C%22%3A%5C%22%2Bv%5B1%5D)%3B%5Cn%7D%5Cn%2F%2F%E5%88%A9%E7%94%A8%E8%A7%A3%E6%9E%84%E7%9B%B4%E6%8E%A5%E8%8E%B7%E5%8F%96key%EF%BC%8Cvalue%5Cnfor(let%20%5Bkey%2Cvalue%5D%20of%20map)%7B%5Cn%20%20%20console.log(key%2B%5C%22%3A%5C%22%2Bvalue)%3B%5Cn%7D%5Cnfor(let%20v%20of%20map.keys())%7B%5Cn%20%20%20console.log(v)%3B%5Cn%7D%5Cnfor(let%20v%20of%20map.values())%7B%5Cn%20%20%20console.log(v)%3B%5Cn%7D%22%7D\"></card><p><br /></p><p>通过一些操作也是可以遍历对象的，可以选择手动给对象添加一个迭代器接口，或者是把对象转换为其它数据结构。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E9%80%9A%E8%BF%87Object.valuse%20%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%80%E6%9C%89%E5%80%BC%E3%80%82%5Cnlet%20obj%3D%7Bname%3A%5C%22zack%5C%22%2Cage%3A24%7D%3B%5Cnfor(let%20v%20of%20Object.values(obj))%7B%5Cn%20%20%20console.log(v)%3B%5Cn%7D%22%7D\"></card><p><br /></p><h2 id=\"c4bb1b6c\">最后给出开始那道面试题的参考。</h2><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20findMax(str)%7B%5Cn%20%20%20%2F%2F%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%5Cn%20%20%20let%20count%20%3D%20%7B%7D%3B%5Cn%20%20%20for(let%20char%20of%20str)%7B%5Cn%20%20%20%20%20%20%20if(count%5Bchar%5D%20%3D%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20count%5Bchar%5D%3D1%3B%5Cn%20%20%20%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20count%5Bchar%5D%2B%2B%3B%5Cn%20%20%20%20%20%20%20%7D%5Cn%20%20%20%7D%5Cn%20%20%20%2F%2F%E6%8E%92%E5%BA%8F%5Cn%20%20%20let%20res%20%3D%20Object.entries(count).sort((a%2Cb)%3D%3E%7B%5Cn%20%20%20%20%20%20%20return%20b%5B1%5D-a%5B1%5D%3B%5Cn%20%20%20%7D)%5Cn%20%20%20%5Cn%20%20%20return%20res%5B0%5D%3B%5Cn%7D%22%7D\"></card><p><br /></p>",
  "body_draft_lake": "",
  "public": 1,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2019-03-07T06:25:38.000Z",
  "deleted_at": null,
  "created_at": "2019-03-07T06:19:54.000Z",
  "updated_at": "2023-02-02T09:07:58.000Z",
  "published_at": "2019-03-07T06:25:38.000Z",
  "first_published_at": "2019-03-07T06:25:38.000Z",
  "word_count": 755,
  "cover": null,
  "description": "这篇文章起源于一道面试题，找出一个字符串中，出现次数最多的字符。面试题不难,正常思路是遍历字符串，统计下字符个数，再排个序，找出最大的。可是可是，好久没手写代码的我，写不来for循环了，平时太依赖自动提示了，依赖调试工具了，都是写错了，然后看报错信息然后改就行。所以所以有了这篇文章。普通for...",
  "custom_description": null,
  "hits": 36,
  "_serializer": "v2.doc_detail"
}