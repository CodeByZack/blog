{
  "id": 1337333,
  "slug": "vcxi77",
  "title": "重新使用Vuex",
  "book_id": 231593,
  "book": {
    "id": 231593,
    "type": "Book",
    "slug": "web",
    "name": "WEB",
    "user_id": 284138,
    "description": "前端知识点记录",
    "creator_id": 284138,
    "public": 1,
    "items_count": 58,
    "likes_count": 0,
    "watches_count": 3,
    "content_updated_at": "2023-02-02T09:09:21.426Z",
    "updated_at": "2023-02-02T09:09:21.000Z",
    "created_at": "2019-03-07T05:05:08.000Z",
    "namespace": "zackdk/web",
    "user": {
      "id": 284138,
      "type": "User",
      "login": "zackdk",
      "name": "行一度空山",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
      "books_count": 2,
      "public_books_count": 1,
      "followers_count": 5,
      "following_count": 0,
      "created_at": "2019-03-07T05:02:38.000Z",
      "updated_at": "2023-02-01T12:18:25.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 284138,
  "creator": {
    "id": 284138,
    "type": "User",
    "login": "zackdk",
    "name": "行一度空山",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
    "books_count": 2,
    "public_books_count": 1,
    "followers_count": 5,
    "following_count": 0,
    "created_at": "2019-03-07T05:02:38.000Z",
    "updated_at": "2023-02-01T12:18:25.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "\n<a name=\"b8361951\"></a>\n## Vuex是什么\n\n**官方说法：**Vuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br />**状态管理模式：**把组件的共享状态抽取出来，以一个全局单例模式管理。<br />定义很抽象，简单说明下。vue是组件化开发的，当不同的组件要用到同一个状态的时候，你会选择怎么处理呢。\n\n- 把状态提升到父组件去，子组件直接使用父组件的状态。但是当两个组件并不是平级的呢，传递数据就显得十分麻烦了。\n- 所以我们就又想到了，直接使用一个全局对象来储存，这样任何地方都能访问到。都能访问过后，当一个地方修改了，怎么同步所有组件的状态呢，直接能想到的用观察者模式。\n- vue本身就是响应式的，vuex已经帮你实现了这个功能，而且额外还有其它功能。当然你完全可以自己来实现这个东西。\n\n<a name=\"ace28e2a\"></a>\n## 怎么使用Vuex的\n\n\n<a name=\"state\"></a>\n### state\n\n**官方说法：**用一个对象就包含了全部的应用层级状态。<br />**我的说法：**普通的js的对象，放全局变量的地方。且这个对象是响应式的，具体是借用了vue的响应式机制。\n\n```javascript\n// use a Vue instance to store the state tree\n// suppress warnings just in case the user has added\n// some funky global mixins\nstore._vm = new Vue({\n  data: {\n    $$state: state\n  },\n  computed\n})\n```\n\n所以使用的时候的，就可以直接借助**computed计算属性**使用。\n\n<a name=\"mutation\"></a>\n### mutation\n\n这就是vuex额外的功能之一了，我也不知道之几。<br />**官方发言：**更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。<br />禁止了直接改动state，至于为啥，自行理解了，无规矩不成方圆嘛。虽然改动变得麻烦了，但好处挺多的。<br />mutation 都有一个字符串的 **事件类型 (type)** 和 一个** 回调函数 (handler)，默认接受一个state参数，且函数只能为同步函数，**看代码吧。\n\n```javascript\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    increment (state) {\n      // 变更状态\n      state.count++\n    }\n  }\n})\n//increment是ES6的简写赋值,事件类型就是该函数名字 increment 回调函数就是该函数。\n//调用该mutation的方法是,store.commit(\"increment\")\n//还有一种接受参数的写法\nmutations: {\n  increment (state, n) {\n    state.count += n\n  }\n}\nstore.commit(\"increment\", 5);\n```\n\n\n<a name=\"action\"></a>\n### action\n\nAction 类似于 mutation，不同在于：\n\n- Action 提交的是 mutation，而不是直接变更状态。\n- Action 可以包含任意异步操作。\n- 很简单明了的说法，其实直接提交mutilation也是可以修改到数据的，我之前也这样做过，因为异步拿数据的操作都放在了组件里。并没有把数据全部抽出到state里，只有通信不方便的地方才会想到去借用这个vuex全局对象来储存数据。所以说我之前使用vuex就和使用全局对象一样，和闹着玩一样。所以重新学习使用vuex。\n- 说多了，一句话，Action里可以有异步操作，访问api这些事可以扔到这里来了。视图层里，只需要触发这些action就ok。逻辑数据操作都到vuex里做。\n\n```javascript\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    increment (state) {\n      // 变更状态\n      state.count++\n    }\n  }\n})\n//创建action，默认参数为一个与 store 实例具有相同方法和属性的 context 对象\n//不一定要同名，取啥名字都行，我是直接从官网copy的\nactions: {\n  increment ({ commit }) {\n    commit('increment')\n  }\n}\n//分发action 也就是调用\nstore.dispatch(\"increment\");\n```\n\n\n<a name=\"getter\"></a>\n### getter\n\n和computed计算属性类似。待续...\n\n<a name=\"moudle\"></a>\n### moudle\n\n用于处理state对象过于庞大，分模块拆分state，方便维护。待续...\n\n\n\n<a name=\"26a35101\"></a>\n## 和全局变量有啥区别\n\n1. vuex的状态存储是响应式的（基于vue的响应式）\n2. 我们能够记录所有 store 中发生的 state 改变，同时实现能做到记录变更 (mutation)、保存状态快照、历史回滚/时光旅行的先进的调试工具。\n3. 状态管理[链接](https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8)\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><p><br /></p><h2 id=\"b8361951\">Vuex是什么</h2><p><br /></p><p><strong>官方说法：</strong>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p><strong>状态管理模式：</strong>把组件的共享状态抽取出来，以一个全局单例模式管理。</p><p>定义很抽象，简单说明下。vue是组件化开发的，当不同的组件要用到同一个状态的时候，你会选择怎么处理呢。</p><p><br /></p><ul><li>把状态提升到父组件去，子组件直接使用父组件的状态。但是当两个组件并不是平级的呢，传递数据就显得十分麻烦了。</li></ul><ul><li>所以我们就又想到了，直接使用一个全局对象来储存，这样任何地方都能访问到。都能访问过后，当一个地方修改了，怎么同步所有组件的状态呢，直接能想到的用观察者模式。</li></ul><ul><li>vue本身就是响应式的，vuex已经帮你实现了这个功能，而且额外还有其它功能。当然你完全可以自己来实现这个东西。</li></ul><p><br /></p><h2 id=\"ace28e2a\">怎么使用Vuex的</h2><p><br /></p><p><br /></p><h3 id=\"state\">state</h3><p><br /></p><p><strong>官方说法：</strong>用一个对象就包含了全部的应用层级状态。</p><p><strong>我的说法：</strong>普通的js的对象，放全局变量的地方。且这个对象是响应式的，具体是借用了vue的响应式机制。</p><p><br /></p><pre data-lang=\"javascript\"><code>// use a Vue instance to store the state tree\n// suppress warnings just in case the user has added\n// some funky global mixins\nstore._vm = new Vue({\n  data: {\n    $$state: state\n  },\n  computed\n})</code></pre><p><br /></p><p>所以使用的时候的，就可以直接借助<strong>computed计算属性</strong>使用。</p><p><br /></p><h3 id=\"mutation\">mutation</h3><p><br /></p><p>这就是vuex额外的功能之一了，我也不知道之几。</p><p><strong>官方发言：</strong>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</p><p>禁止了直接改动state，至于为啥，自行理解了，无规矩不成方圆嘛。虽然改动变得麻烦了，但好处挺多的。</p><p>mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个<strong> 回调函数 (handler)，默认接受一个state参数，且函数只能为同步函数，</strong>看代码吧。</p><p><br /></p><pre data-lang=\"javascript\"><code>const store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    increment (state) {\n      // 变更状态\n      state.count++\n    }\n  }\n})\n//increment是ES6的简写赋值,事件类型就是该函数名字 increment 回调函数就是该函数。\n//调用该mutation的方法是,store.commit(&quot;increment&quot;)\n//还有一种接受参数的写法\nmutations: {\n  increment (state, n) {\n    state.count += n\n  }\n}\nstore.commit(&quot;increment&quot;, 5);</code></pre><p><br /></p><p><br /></p><h3 id=\"action\">action</h3><p><br /></p><p>Action 类似于 mutation，不同在于：</p><p><br /></p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li></ul><ul><li>Action 可以包含任意异步操作。</li><li>很简单明了的说法，其实直接提交mutilation也是可以修改到数据的，我之前也这样做过，因为异步拿数据的操作都放在了组件里。并没有把数据全部抽出到state里，只有通信不方便的地方才会想到去借用这个vuex全局对象来储存数据。所以说我之前使用vuex就和使用全局对象一样，和闹着玩一样。所以重新学习使用vuex。</li><li>说多了，一句话，Action里可以有异步操作，访问api这些事可以扔到这里来了。视图层里，只需要触发这些action就ok。逻辑数据操作都到vuex里做。</li></ul><p><br /></p><pre data-lang=\"javascript\"><code>const store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    increment (state) {\n      // 变更状态\n      state.count++\n    }\n  }\n})\n//创建action，默认参数为一个与 store 实例具有相同方法和属性的 context 对象\n//不一定要同名，取啥名字都行，我是直接从官网copy的\nactions: {\n  increment ({ commit }) {\n    commit('increment')\n  }\n}\n//分发action 也就是调用\nstore.dispatch(&quot;increment&quot;);</code></pre><p><br /></p><p><br /></p><h3 id=\"getter\">getter</h3><p><br /></p><p>和computed计算属性类似。待续...</p><p><br /></p><h3 id=\"moudle\">moudle</h3><p><br /></p><p>用于处理state对象过于庞大，分模块拆分state，方便维护。待续...</p><p><br /></p><p><br /></p><p><br /></p><h2 id=\"26a35101\">和全局变量有啥区别</h2><p><br /></p><ol start=\"1\"><li>vuex的状态存储是响应式的（基于vue的响应式）</li></ol><ol start=\"2\"><li>我们能够记录所有 store 中发生的 state 改变，同时实现能做到记录变更 (mutation)、保存状态快照、历史回滚/时光旅行的先进的调试工具。</li></ol><ol start=\"3\"><li>状态管理<a href=\"https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8\" target=\"_blank\">链接</a></li></ol><p><br /></p>",
  "body_lake": "<!doctype lake><p><cursor /><br /></p><h2 id=\"b8361951\">Vuex是什么</h2><p><br /></p><p><strong>官方说法：</strong>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p><strong>状态管理模式：</strong>把组件的共享状态抽取出来，以一个全局单例模式管理。</p><p>定义很抽象，简单说明下。vue是组件化开发的，当不同的组件要用到同一个状态的时候，你会选择怎么处理呢。</p><p><br /></p><ul><li>把状态提升到父组件去，子组件直接使用父组件的状态。但是当两个组件并不是平级的呢，传递数据就显得十分麻烦了。</li></ul><ul><li>所以我们就又想到了，直接使用一个全局对象来储存，这样任何地方都能访问到。都能访问过后，当一个地方修改了，怎么同步所有组件的状态呢，直接能想到的用观察者模式。</li></ul><ul><li>vue本身就是响应式的，vuex已经帮你实现了这个功能，而且额外还有其它功能。当然你完全可以自己来实现这个东西。</li></ul><p><br /></p><h2 id=\"ace28e2a\">怎么使用Vuex的</h2><p><br /></p><p><br /></p><h3 id=\"state\">state</h3><p><br /></p><p><strong>官方说法：</strong>用一个对象就包含了全部的应用层级状态。</p><p><strong>我的说法：</strong>普通的js的对象，放全局变量的地方。且这个对象是响应式的，具体是借用了vue的响应式机制。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20use%20a%20Vue%20instance%20to%20store%20the%20state%20tree%5Cn%2F%2F%20suppress%20warnings%20just%20in%20case%20the%20user%20has%20added%5Cn%2F%2F%20some%20funky%20global%20mixins%5Cnstore._vm%20%3D%20new%20Vue(%7B%5Cn%20%20data%3A%20%7B%5Cn%20%20%20%20%24%24state%3A%20state%5Cn%20%20%7D%2C%5Cn%20%20computed%5Cn%7D)%22%7D\"></card><p><br /></p><p>所以使用的时候的，就可以直接借助<strong>computed计算属性</strong>使用。</p><p><br /></p><h3 id=\"mutation\">mutation</h3><p><br /></p><p>这就是vuex额外的功能之一了，我也不知道之几。</p><p><strong>官方发言：</strong>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</p><p>禁止了直接改动state，至于为啥，自行理解了，无规矩不成方圆嘛。虽然改动变得麻烦了，但好处挺多的。</p><p>mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个<strong> 回调函数 (handler)，默认接受一个state参数，且函数只能为同步函数，</strong>看代码吧。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20store%20%3D%20new%20Vuex.Store(%7B%5Cn%20%20state%3A%20%7B%5Cn%20%20%20%20count%3A%201%5Cn%20%20%7D%2C%5Cn%20%20mutations%3A%20%7B%5Cn%20%20%20%20increment%20(state)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E5%8F%98%E6%9B%B4%E7%8A%B6%E6%80%81%5Cn%20%20%20%20%20%20state.count%2B%2B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D)%5Cn%2F%2Fincrement%E6%98%AFES6%E7%9A%84%E7%AE%80%E5%86%99%E8%B5%8B%E5%80%BC%2C%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%B0%B1%E6%98%AF%E8%AF%A5%E5%87%BD%E6%95%B0%E5%90%8D%E5%AD%97%20increment%20%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%B0%B1%E6%98%AF%E8%AF%A5%E5%87%BD%E6%95%B0%E3%80%82%5Cn%2F%2F%E8%B0%83%E7%94%A8%E8%AF%A5mutation%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%2Cstore.commit(%5C%22increment%5C%22)%5Cn%2F%2F%E8%BF%98%E6%9C%89%E4%B8%80%E7%A7%8D%E6%8E%A5%E5%8F%97%E5%8F%82%E6%95%B0%E7%9A%84%E5%86%99%E6%B3%95%5Cnmutations%3A%20%7B%5Cn%20%20increment%20(state%2C%20n)%20%7B%5Cn%20%20%20%20state.count%20%2B%3D%20n%5Cn%20%20%7D%5Cn%7D%5Cnstore.commit(%5C%22increment%5C%22%2C%205)%3B%22%7D\"></card><p><br /></p><p><br /></p><h3 id=\"action\">action</h3><p><br /></p><p>Action 类似于 mutation，不同在于：</p><p><br /></p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li></ul><ul><li>Action 可以包含任意异步操作。</li><li>很简单明了的说法，其实直接提交mutilation也是可以修改到数据的，我之前也这样做过，因为异步拿数据的操作都放在了组件里。并没有把数据全部抽出到state里，只有通信不方便的地方才会想到去借用这个vuex全局对象来储存数据。所以说我之前使用vuex就和使用全局对象一样，和闹着玩一样。所以重新学习使用vuex。</li><li>说多了，一句话，Action里可以有异步操作，访问api这些事可以扔到这里来了。视图层里，只需要触发这些action就ok。逻辑数据操作都到vuex里做。</li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20store%20%3D%20new%20Vuex.Store(%7B%5Cn%20%20state%3A%20%7B%5Cn%20%20%20%20count%3A%201%5Cn%20%20%7D%2C%5Cn%20%20mutations%3A%20%7B%5Cn%20%20%20%20increment%20(state)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E5%8F%98%E6%9B%B4%E7%8A%B6%E6%80%81%5Cn%20%20%20%20%20%20state.count%2B%2B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D)%5Cn%2F%2F%E5%88%9B%E5%BB%BAaction%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%B8%8E%20store%20%E5%AE%9E%E4%BE%8B%E5%85%B7%E6%9C%89%E7%9B%B8%E5%90%8C%E6%96%B9%E6%B3%95%E5%92%8C%E5%B1%9E%E6%80%A7%E7%9A%84%20context%20%E5%AF%B9%E8%B1%A1%5Cn%2F%2F%E4%B8%8D%E4%B8%80%E5%AE%9A%E8%A6%81%E5%90%8C%E5%90%8D%EF%BC%8C%E5%8F%96%E5%95%A5%E5%90%8D%E5%AD%97%E9%83%BD%E8%A1%8C%EF%BC%8C%E6%88%91%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BB%8E%E5%AE%98%E7%BD%91copy%E7%9A%84%5Cnactions%3A%20%7B%5Cn%20%20increment%20(%7B%20commit%20%7D)%20%7B%5Cn%20%20%20%20commit('increment')%5Cn%20%20%7D%5Cn%7D%5Cn%2F%2F%E5%88%86%E5%8F%91action%20%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%B0%83%E7%94%A8%5Cnstore.dispatch(%5C%22increment%5C%22)%3B%22%7D\"></card><p><br /></p><p><br /></p><h3 id=\"getter\">getter</h3><p><br /></p><p>和computed计算属性类似。待续...</p><p><br /></p><h3 id=\"moudle\">moudle</h3><p><br /></p><p>用于处理state对象过于庞大，分模块拆分state，方便维护。待续...</p><p><br /></p><p><br /></p><p><br /></p><h2 id=\"26a35101\">和全局变量有啥区别</h2><p><br /></p><ol start=\"1\"><li>vuex的状态存储是响应式的（基于vue的响应式）</li></ol><ol start=\"2\"><li>我们能够记录所有 store 中发生的 state 改变，同时实现能做到记录变更 (mutation)、保存状态快照、历史回滚/时光旅行的先进的调试工具。</li></ol><ol start=\"3\"><li>状态管理<a href=\"https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8\" target=\"_blank\">链接</a></li></ol><p><br /></p>",
  "body_draft_lake": "",
  "public": 1,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2019-03-07T05:07:59.000Z",
  "deleted_at": null,
  "created_at": "2019-03-07T05:05:46.000Z",
  "updated_at": "2023-02-02T09:07:59.000Z",
  "published_at": "2019-03-07T05:07:59.000Z",
  "first_published_at": "2019-03-07T05:07:59.000Z",
  "word_count": 1067,
  "cover": null,
  "description": "Vuex是什么官方说法：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。状态管理模式：把组件的共享状态抽取出来，以一个全局单例模式管理。定义很抽象，简单说明下。vue是组件化开发的，当不...",
  "custom_description": null,
  "hits": 20,
  "_serializer": "v2.doc_detail"
}