{
  "id": 1338056,
  "slug": "duugz2",
  "title": "JS知识点之原型/原型链那些事儿",
  "book_id": 231593,
  "book": {
    "id": 231593,
    "type": "Book",
    "slug": "web",
    "name": "WEB",
    "user_id": 284138,
    "description": "前端知识点记录",
    "creator_id": 284138,
    "public": 1,
    "items_count": 58,
    "likes_count": 0,
    "watches_count": 3,
    "content_updated_at": "2023-02-02T09:09:21.426Z",
    "updated_at": "2023-02-02T09:09:21.000Z",
    "created_at": "2019-03-07T05:05:08.000Z",
    "namespace": "zackdk/web",
    "user": {
      "id": 284138,
      "type": "User",
      "login": "zackdk",
      "name": "行一度空山",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
      "books_count": 2,
      "public_books_count": 1,
      "followers_count": 5,
      "following_count": 0,
      "created_at": "2019-03-07T05:02:38.000Z",
      "updated_at": "2023-02-01T12:18:25.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 284138,
  "creator": {
    "id": 284138,
    "type": "User",
    "login": "zackdk",
    "name": "行一度空山",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
    "books_count": 2,
    "public_books_count": 1,
    "followers_count": 5,
    "following_count": 0,
    "created_at": "2019-03-07T05:02:38.000Z",
    "updated_at": "2023-02-01T12:18:25.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"53582bdc\"></a>\n## 原型（prototype）是什么？\n\n原型并不神秘，它实际也就是一个对象或者是null。\n\nJavaScript里每个对象都有一个与之相关连的原型，你可以通过访问对象的`__proto__`属性，或者使用`Object.getPrototypeOf`来找到它。\n\n你可以使用`Object.setPrototypeOf`显示去修改一个对象的原型指向。\n\n但需要注意的是，原型有可能为不存在，即值为`null`，代表着这个对象没有原型了。\n\n```javascript\n//获取原型\nconst a = {};\na.__proto__ === Object.getPrototypeOf(a);\n\n//修改原型指向\nObject.setPrototypeOf(a,null);\n\n//原型为 null\nObject.__proto__.__proto__.__proto__ === null;\n\nObject.getPrototypeOf(a) === null;\n```\n\n<a name=\"dp9QS\"></a>\n## 原型链是什么？\n\n假设A对象的`__proto__`属性，指向的为B对象，则B对象就是A对象的原型。\n\nB本身也是对象，则也拥有一个`__proto__`属性，指向另一个对象。\n\n这样一层套一层，就形成了一个链条。直到原型链顶端`__proto__`属性指向`null`。原型链结束。\n\nJS中原型默认指向`null`的对象为数不多，`Object.prototype`就是其中的一个，既`Object.prototype.__proto__ === null`。\n\n<a name=\"66b6b632\"></a>\n## 原型指向是如何确定的？\n\n`__proto__`指向的对象是如何确定的？\n\n要确定这件事，我们得看看JavaScript里是怎么生成对象的：\n\n<a name=\"9181f2f5\"></a>\n### 1.通过new操作符生成对象\n\nJavaScript里new操作符，不过是使用特定的方式去调用一个函数。\n\nJavaScript里通过new调用的函数，称之为构造函数。\n\nJavaScript里函数都带有一个`prototype`属性，你可以随时更改它的指向。\n\nJavaScript里函数默认的`prototype`属性，拥有一个`constructor`属性，指向函数自己。\n\n通过new操作符调用构造函数，生成对象。该对象的**原型**指向了**构造函数的`prototype`属性**。\n\n```javascript\n\nfunction temp(){};\n\nconst a = new temp();\n\ntemp.prototype === a.__proto__;\n\ntemp.prototype.constructor === temp;\n```\n\n<a name=\"02c6fe0b\"></a>\n### 2.对象字面量\n\n对象字面量即常用的写一对大括号，里面是key-value形式的键值对。该种方式声明对象的原型指向`Object.prototype`。\n\n或者换种说法，字面量声明对象，默认是使用`Object`去构造的,即`new Object()`。\n\n```javascript\n\na = { b:1 };\n\nb = new Object();\n\na.__proto__ === b.__proto__\n\na.__proto__ === Object.prototype\n```\n\n<a name=\"d49ecf0a\"></a>\n### 3.使用Object.create创建对象\n\n调用`Object.create`后会产生一个新的对象，传入`Object.create`的参数即为新对象的原型。\n\n```javascript\n\na = { b:1 };\n\nb = Object.create(a);\n\nb.__proto__ === a;\n```\n\n总结一下，使用new调用构造函数生成新对象，新对象原型指向了构造函数的`prototype`属性、使用对象字面量的形式创建的对象，原型默认指向了`Object.prototype`、使用`Object.create`创建的对象的原型指向了你传入的第一个参数。\n\n<a name=\"b5a146f5\"></a>\n## 一张关于原型的经典的图\n\n![](https://cdn.nlark.com/yuque/0/2019/png/284138/1551942034925-da8c0fe2-7a0f-4ee4-b292-43f6c18a1431.png#align=left&display=inline&height=740&originHeight=740&originWidth=733&size=0&status=done&style=none&width=733)\n\n这里存在一个的问题，众所周知JS里函数也是对象，那么函数是由谁构造的呢？那么函数的`__proto__`指向谁呢？\n\n先看图中中间一部分，声明了三个函数，Foo函数，Object函数，Function函数。\n\n然后从上到下一个一个说，\n\n<a name=\"d2cb3dfb\"></a>\n### 1.Foo函数\n\nFoo函数有它的`prototype`属性，且`prototype.constructor`指回了Foo函数本身。\n\nf1/f2 是通过`new Foo()`生成的新对象，它俩的`__proto__`属性都指向了`Foo.prototype`。\n\n`Foo.prototype`只是一个对象，所以它也有自己的原型，即`__proto__`属性，在你没修改情况下，指向了`Object.prototype`。\n\nFoo函数本身也是一个对象，意味着它有自己的原型`__proto__`，指向了`Function.prototype`，这条线意味着，**函数都是通过内置的`Function`函数构造出来的**。\n\n至此图中所有指向都明晰了。\n\n<a name=\"e160e5ca\"></a>\n### 2.Object函数\n\nObject函数基本上和Foo函数的指向是一样的，毕竟他们都是函数，只不过Object是内置的，Foo是你写的，还有一点不同在他们的`prototype`属性上。\n\nObject函数有自己的`prototype`属性，且`prototype.constructor`指回了Object函数本身。\n\nf1/f2 是通过`new Object()`生成的新对象，它俩的`__proto__`属性都指向了`Object.prototype`。\n\n`Object.prototype`只是一个对象，所以它也有自己的原型，即`__proto__`属性，Object函数不同点就在于此，`Object.prototype.__proto__`值为`null`。即原型链在此终结。\n\nObject函数本身也是一个对象，意味着它有自己的原型`__proto__`，指向了`Function.prototype`，这条线意味着，**函数都是通过内置的`Function`函数构造出来的**。\n\n<a name=\"cf908962\"></a>\n### 3.Function函数\n\nFunction函数也是内置的，且所有函数都是通过它构造出来的，包括它自己。所以，你可以说，**默认情况下，所有函数的__proto__属性都指向Function.prototype**。\n\n所以上图中，`Foo.__proto__`、`Object.__proto__`、`Function.__proto__` 都指向了`Function.prototype`。\n\n其它指向不出其外。\n\nFunction函数有自己的`prototype`属性，且`prototype.constructor`指回了Function函数本身。\n\n`Function.prototype`只是一个对象，所以它也有自己的原型，即`__proto__`属性，在你没修改情况下，指向了`Object.prototype`。\n\n\n\n\n\n\n\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B0%2C0%2C0%5D%2C%5B0%2C0%2C0%5D%5D%2C%22active%22%3Atrue%7D\"><h2 id=\"53582bdc\" data-lake-id=\"4879b03e3634f4b52aeef1c1ae39737b\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">原型（prototype）是什么？</h2><p data-lake-id=\"63716cbfd81669427d41fe878772a1cd\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"80e1946ce2f737a727c1f1e077d2c91b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">原型并不神秘，它实际也就是一个对象或者是null。</p><p data-lake-id=\"6870eaeb08cb030a0609f041a02231d7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"63154ba48b0414a225a67ee8cbdcf55f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript里每个对象都有一个与之相关连的原型，你可以通过访问对象的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性，或者使用<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.getPrototypeOf</code>来找到它。</p><p data-lake-id=\"7b2c85a66d31d7284a00d5a0715342f4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"b12f29820f80f638f45d297183e142ac\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">你可以使用<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.setPrototypeOf</code>显示去修改一个对象的原型指向。</p><p data-lake-id=\"e0e373b5af7ea64c77289e2f5c189c2f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"b56f70ba6966fe99d9684a21c05ff27a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">但需要注意的是，原型有可能为不存在，即值为<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">null</code>，代表着这个对象没有原型了。</p><p data-lake-id=\"d238d0ff343da543b192a631a9c8ee89\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"affa53e4\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//获取原型</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> {};\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Object</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getPrototypeOf</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//修改原型指向</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Object</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setPrototypeOf</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>,<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//原型为 null</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Object</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Object</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getPrototypeOf</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>;</span></span></pre></div></div></div><p data-lake-id=\"ac40d3abe0a33c47eaea7abd977176a4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"dp9QS\" data-lake-id=\"aa6a58bf4433370f36ed32f185e0c490\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">原型链是什么？</h2><p data-lake-id=\"4329c977a713a78c243309202d1ef83a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"88440c35bfbc3b78cc11fb2849df1241\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">假设A对象的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性，指向的为B对象，则B对象就是A对象的原型。</p><p data-lake-id=\"536f7886fe89be12f437aeb5440f7ba3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"9a7e36f0de33278c7aa437c426d50b08\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">B本身也是对象，则也拥有一个<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性，指向另一个对象。</p><p data-lake-id=\"af99f0a5a75f28f09ef30257cb3fcc54\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"2c8b3830018d0e734969967f9987df64\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这样一层套一层，就形成了一个链条。直到原型链顶端<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性指向<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">null</code>。原型链结束。</p><p data-lake-id=\"4e14e3f84fce744920a34c5b8ee4b1f6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"eeae00125a8ec77b14831d4b7bcea9db\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JS中原型默认指向<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">null</code>的对象为数不多，<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype</code>就是其中的一个，既<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype.__proto__ === null</code>。</p><p data-lake-id=\"113ab7c571af1ca29a000caeb4e09d57\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"66b6b632\" data-lake-id=\"ac0e317f9b25084ba392d0d91889b763\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">原型指向是如何确定的？</h2><p data-lake-id=\"56cd0cc1d8ba055bc25aa22e584603e4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"97078291c648699d7af198c270e4a326\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>指向的对象是如何确定的？</p><p data-lake-id=\"32e92a672cc5d646e9cd253a1e0ac855\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"5ea178fa702bc9ffb6453bf91a8da4ff\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">要确定这件事，我们得看看JavaScript里是怎么生成对象的：</p><p data-lake-id=\"fb84199297de19a903229fd25825aa69\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"9181f2f5\" data-lake-id=\"80625e6633b91710123dbfc8e55efa65\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">1.通过new操作符生成对象</h3><p data-lake-id=\"6fe55d6b5cac112c8492fc7c832fee95\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"f9df7eca42c30c359955fb400fb59787\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript里new操作符，不过是使用特定的方式去调用一个函数。</p><p data-lake-id=\"130e871cbb4f1515cd042a3a8c108d51\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"0e3cedc872f5018d9e6e80398e0d23e7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript里通过new调用的函数，称之为构造函数。</p><p data-lake-id=\"7ed0f66f470891662c7d353d7f2f395d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"bbf76bf4aabaf30dded7cc1053a78759\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript里函数都带有一个<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype</code>属性，你可以随时更改它的指向。</p><p data-lake-id=\"22b9f639c635bef0d73c43a1e883a4df\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"47d31d9c104a4dff5ebb954b20d5818a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript里函数默认的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype</code>属性，拥有一个<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">constructor</code>属性，指向函数自己。</p><p data-lake-id=\"ed7936798dcfca1563eb30b0f4b89505\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"4307fcacd78e303bda3b9dbd03e86cea\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">通过new操作符调用构造函数，生成对象。该对象的<strong>原型</strong>指向了<strong>构造函数的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype</code>属性</strong>。</p><p data-lake-id=\"6836e1f6235629cd5b82135b56977df7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"c587c877\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">temp</span>(){};\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">temp</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">temp</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">prototype</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">temp</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">prototype</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">constructor</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">temp</span>;</span></span></pre></div></div></div><p data-lake-id=\"95afef404170e77ccdfaa0fda5677a64\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"02c6fe0b\" data-lake-id=\"0d846c2242593522ef09f59de5aea04b\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">2.对象字面量</h3><p data-lake-id=\"3d6064171ab8ffde8681cf4fc4215e36\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"361ebeaa497dd612178001a9f0dea470\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">对象字面量即常用的写一对大括号，里面是key-value形式的键值对。该种方式声明对象的原型指向<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype</code>。</p><p data-lake-id=\"eefb10d0b864c458fe0032f2ff46df16\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"e904bab73a5324a0014a2579247f2c62\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">或者换种说法，字面量声明对象，默认是使用<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object</code>去构造的,即<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">new Object()</code>。</p><p data-lake-id=\"ade60a7860f810a6169fe5cc5a860618\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"15bb9568\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> { <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span>:<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span> };\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Object</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Object</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">prototype</span></span></span></pre></div></div></div><p data-lake-id=\"d33c5f8f51bfe1fde0fc2a7b8fe6877a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"d49ecf0a\" data-lake-id=\"977b24bbc7c8e9bc44f94b49a7fcd7f5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">3.使用Object.create创建对象</h3><p data-lake-id=\"78a79fc91b4ce9bc253182494810483f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ac04bc0835d2979c8faa90cc81b55ab5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">调用<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.create</code>后会产生一个新的对象，传入<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.create</code>的参数即为新对象的原型。</p><p data-lake-id=\"da82c3bed7f77f290cbd925dd28c6701\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"ba88432a\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> { <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span>:<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span> };\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Object</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">create</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">__proto__</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>;</span></span></pre></div></div></div><p data-lake-id=\"0584ea0d3ffd5afc8252f37b56e7ca3e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"1df3a422ff7980a121c57d8b0ff7a57a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">总结一下，使用new调用构造函数生成新对象，新对象原型指向了构造函数的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype</code>属性、使用对象字面量的形式创建的对象，原型默认指向了<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype</code>、使用<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.create</code>创建的对象的原型指向了你传入的第一个参数。</p><p data-lake-id=\"3072b74ad156a18f141b4a45ea0ce3c4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"b5a146f5\" data-lake-id=\"d6cf6e52780883c543ff6cbfdefd6e33\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">一张关于原型的经典的图</h2><p data-lake-id=\"3c4828af21a12ab982e9bd72e299cb51\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"90afbdc0fed9e73ca0f1ed8c0d9b9c1d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/284138/1551942034925-da8c0fe2-7a0f-4ee4-b292-43f6c18a1431.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image\" title=\"image\" data-height=\"740px\" style=\"visibility: visible; width: 733px;\"></span></p><p data-lake-id=\"c47408dd1d1044641094ee91779e3980\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"52aeb02b156145899fe9dee2260e3f12\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这里存在一个的问题，众所周知JS里函数也是对象，那么函数是由谁构造的呢？那么函数的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>指向谁呢？</p><p data-lake-id=\"deeed207286e300fc4ce4958df39c5c4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"f28e92326a61c336e4868e0d875e332d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">先看图中中间一部分，声明了三个函数，Foo函数，Object函数，Function函数。</p><p data-lake-id=\"8a0d4759357115c660ff808a5f9e10e6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"abca7e263fc9523cab7386cb1d809edf\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">然后从上到下一个一个说，</p><p data-lake-id=\"00da5688ab3cc8a3ee625d097ecf82b3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"d2cb3dfb\" data-lake-id=\"d6a8b8beec534002a970e85c8c35cd46\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">1.Foo函数</h3><p data-lake-id=\"e134a9779da23722ac1ac4d0afd2cdd8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"fcbc7919667c630fa0d4301fc1c953c1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Foo函数有它的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype</code>属性，且<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype.constructor</code>指回了Foo函数本身。</p><p data-lake-id=\"158b5be44cceeed5bc1ac14a14ec41ac\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"2479c9667b9a40aa6ba3908c7cdbffb7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">f1/f2 是通过<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">new Foo()</code>生成的新对象，它俩的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性都指向了<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Foo.prototype</code>。</p><p data-lake-id=\"ab4b5696911092626a9daa4b063d9dff\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"009c69035a0faf44fe5608785cfc03ee\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Foo.prototype</code>只是一个对象，所以它也有自己的原型，即<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性，在你没修改情况下，指向了<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype</code>。</p><p data-lake-id=\"2c58d6f870bcc9c5615460265f60b164\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"636cd863de1f8ffd0e9ad9dbb7b01ee5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Foo函数本身也是一个对象，意味着它有自己的原型<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>，指向了<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Function.prototype</code>，这条线意味着，<strong>函数都是通过内置的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Function</code>函数构造出来的</strong>。</p><p data-lake-id=\"face0e7bb552f3f326d0aef9ba785255\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"7e66277ec35d4a8c5f9730cd84c1f898\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">至此图中所有指向都明晰了。</p><p data-lake-id=\"6431c8b8d901153854c412014ec9556f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"e160e5ca\" data-lake-id=\"fbb0a3c5043a080839c8bf537845ab30\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">2.Object函数</h3><p data-lake-id=\"6ef60a110fa0e97959764cf88f9dd993\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"93d52838ffe537a2e7338a5835894da2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Object函数基本上和Foo函数的指向是一样的，毕竟他们都是函数，只不过Object是内置的，Foo是你写的，还有一点不同在他们的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype</code>属性上。</p><p data-lake-id=\"4c99cc08103be6b0db2de72a34b9e285\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"f6ff7119cb223dc7d6d48de5339b0113\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Object函数有自己的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype</code>属性，且<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype.constructor</code>指回了Object函数本身。</p><p data-lake-id=\"3633ffeaf7f7bcd16f9563845c90775b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"e0808209d587152bd7362dc296a3caae\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">f1/f2 是通过<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">new Object()</code>生成的新对象，它俩的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性都指向了<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype</code>。</p><p data-lake-id=\"865134c4d0a458cc704c306cedb171d5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"758cf998feac40b0cffc7494458baf2b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype</code>只是一个对象，所以它也有自己的原型，即<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性，Object函数不同点就在于此，<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype.__proto__</code>值为<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">null</code>。即原型链在此终结。</p><p data-lake-id=\"a438fdd69d7d6449e8461a2bedc5cd0d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"5120af8a0f9aff83afb8ce18263a9d0d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Object函数本身也是一个对象，意味着它有自己的原型<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>，指向了<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Function.prototype</code>，这条线意味着，<strong>函数都是通过内置的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Function</code>函数构造出来的</strong>。</p><p data-lake-id=\"0c65148e9103a3f161cf2b641d497a7a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"cf908962\" data-lake-id=\"5e1d0e83b375b048f8dfea1f613a34ea\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">3.Function函数</h3><p data-lake-id=\"e4e60a3209a463be2f27f171eafcc7c6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"4e485dca8ee69f4c4c3b688035676d4a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Function函数也是内置的，且所有函数都是通过它构造出来的，包括它自己。所以，你可以说，<strong>默认情况下，所有函数的__proto__属性都指向Function.prototype</strong>。</p><p data-lake-id=\"ac18ecf69d937e934e33e31a801e25f8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"cf5c412f7f6aa5a6d01a2cf80b96db69\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">所以上图中，<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Foo.__proto__</code>、<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.__proto__</code>、<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Function.__proto__</code> 都指向了<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Function.prototype</code>。</p><p data-lake-id=\"34fd562093d32026a13e13566748a8bd\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"5d1e7d9c7d31df8eb6e6633d5e289b52\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">其它指向不出其外。</p><p data-lake-id=\"3b5549688ec1fae13f1cd8319d87c359\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"95ae8c42cbab5154c22776e83dd05621\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Function函数有自己的<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype</code>属性，且<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">prototype.constructor</code>指回了Function函数本身。</p><p data-lake-id=\"890cbb61fddf4928595ac8de042b3e62\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"751d1782195c111c960ef1f3d208e794\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Function.prototype</code>只是一个对象，所以它也有自己的原型，即<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">__proto__</code>属性，在你没修改情况下，指向了<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Object.prototype</code>。</p><p data-lake-id=\"470257ffbff08ad0eedbc557452f8c66_p_84\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"bd02ded472df593f8e23bb50569c5ce4_p_85\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"bd67236b6b40e1ddeba66aa4c905c5af_p_87\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ab51a4ad9cb9ee48199bb5c9fc6715a2_p_89\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"700ece5e21ebc17eb29d438c814531fe_p_90\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"2585884a100de0fae153ff935c1040bf_p_91\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><h2 id=\"53582bdc\" data-lake-id=\"4879b03e3634f4b52aeef1c1ae39737b\">原型（prototype）是什么？</h2><p data-lake-id=\"63716cbfd81669427d41fe878772a1cd\"><br /></p><p data-lake-id=\"80e1946ce2f737a727c1f1e077d2c91b\">原型并不神秘，它实际也就是一个对象或者是null。</p><p data-lake-id=\"6870eaeb08cb030a0609f041a02231d7\"><br /></p><p data-lake-id=\"63154ba48b0414a225a67ee8cbdcf55f\">JavaScript里每个对象都有一个与之相关连的原型，你可以通过访问对象的<code>__proto__</code>属性，或者使用<code>Object.getPrototypeOf</code>来找到它。</p><p data-lake-id=\"7b2c85a66d31d7284a00d5a0715342f4\"><br /></p><p data-lake-id=\"b12f29820f80f638f45d297183e142ac\">你可以使用<code>Object.setPrototypeOf</code>显示去修改一个对象的原型指向。</p><p data-lake-id=\"e0e373b5af7ea64c77289e2f5c189c2f\"><br /></p><p data-lake-id=\"b56f70ba6966fe99d9684a21c05ff27a\">但需要注意的是，原型有可能为不存在，即值为<code>null</code>，代表着这个对象没有原型了。</p><p data-lake-id=\"d238d0ff343da543b192a631a9c8ee89\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22affa53e4%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E8%8E%B7%E5%8F%96%E5%8E%9F%E5%9E%8B%5Cnconst%20a%20%3D%20%7B%7D%3B%5Cna.__proto__%20%3D%3D%3D%20Object.getPrototypeOf(a)%3B%5Cn%5Cn%2F%2F%E4%BF%AE%E6%94%B9%E5%8E%9F%E5%9E%8B%E6%8C%87%E5%90%91%5CnObject.setPrototypeOf(a%2Cnull)%3B%5Cn%5Cn%2F%2F%E5%8E%9F%E5%9E%8B%E4%B8%BA%20null%5CnObject.__proto__.__proto__.__proto__%20%3D%3D%3D%20null%3B%5Cn%5CnObject.getPrototypeOf(a)%20%3D%3D%3D%20null%3B%22%7D\"></card><p data-lake-id=\"ac40d3abe0a33c47eaea7abd977176a4\"><br /></p><h2 id=\"dp9QS\" data-lake-id=\"aa6a58bf4433370f36ed32f185e0c490\">原型链是什么？</h2><p data-lake-id=\"4329c977a713a78c243309202d1ef83a\"><br /></p><p data-lake-id=\"88440c35bfbc3b78cc11fb2849df1241\">假设A对象的<code>__proto__</code>属性，指向的为B对象，则B对象就是A对象的原型。</p><p data-lake-id=\"536f7886fe89be12f437aeb5440f7ba3\"><br /></p><p data-lake-id=\"9a7e36f0de33278c7aa437c426d50b08\">B本身也是对象，则也拥有一个<code>__proto__</code>属性，指向另一个对象。</p><p data-lake-id=\"af99f0a5a75f28f09ef30257cb3fcc54\"><br /></p><p data-lake-id=\"2c8b3830018d0e734969967f9987df64\">这样一层套一层，就形成了一个链条。直到原型链顶端<code>__proto__</code>属性指向<code>null</code>。原型链结束。</p><p data-lake-id=\"4e14e3f84fce744920a34c5b8ee4b1f6\"><br /></p><p data-lake-id=\"eeae00125a8ec77b14831d4b7bcea9db\">JS中原型默认指向<code>null</code>的对象为数不多，<code>Object.prototype</code>就是其中的一个，既<code>Object.prototype.__proto__ === null</code>。</p><p data-lake-id=\"113ab7c571af1ca29a000caeb4e09d57\"><br /></p><h2 id=\"66b6b632\" data-lake-id=\"ac0e317f9b25084ba392d0d91889b763\">原型指向是如何确定的？</h2><p data-lake-id=\"56cd0cc1d8ba055bc25aa22e584603e4\"><br /></p><p data-lake-id=\"97078291c648699d7af198c270e4a326\"><code>__proto__</code>指向的对象是如何确定的？</p><p data-lake-id=\"32e92a672cc5d646e9cd253a1e0ac855\"><br /></p><p data-lake-id=\"5ea178fa702bc9ffb6453bf91a8da4ff\">要确定这件事，我们得看看JavaScript里是怎么生成对象的：</p><p data-lake-id=\"fb84199297de19a903229fd25825aa69\"><br /></p><h3 id=\"9181f2f5\" data-lake-id=\"80625e6633b91710123dbfc8e55efa65\">1.通过new操作符生成对象</h3><p data-lake-id=\"6fe55d6b5cac112c8492fc7c832fee95\"><br /></p><p data-lake-id=\"f9df7eca42c30c359955fb400fb59787\">JavaScript里new操作符，不过是使用特定的方式去调用一个函数。</p><p data-lake-id=\"130e871cbb4f1515cd042a3a8c108d51\"><br /></p><p data-lake-id=\"0e3cedc872f5018d9e6e80398e0d23e7\">JavaScript里通过new调用的函数，称之为构造函数。</p><p data-lake-id=\"7ed0f66f470891662c7d353d7f2f395d\"><br /></p><p data-lake-id=\"bbf76bf4aabaf30dded7cc1053a78759\">JavaScript里函数都带有一个<code>prototype</code>属性，你可以随时更改它的指向。</p><p data-lake-id=\"22b9f639c635bef0d73c43a1e883a4df\"><br /></p><p data-lake-id=\"47d31d9c104a4dff5ebb954b20d5818a\">JavaScript里函数默认的<code>prototype</code>属性，拥有一个<code>constructor</code>属性，指向函数自己。</p><p data-lake-id=\"ed7936798dcfca1563eb30b0f4b89505\"><br /></p><p data-lake-id=\"4307fcacd78e303bda3b9dbd03e86cea\">通过new操作符调用构造函数，生成对象。该对象的<strong>原型</strong>指向了<strong>构造函数的<code>prototype</code>属性</strong>。</p><p data-lake-id=\"6836e1f6235629cd5b82135b56977df7\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c587c877%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5Cnfunction%20temp()%7B%7D%3B%5Cn%5Cnconst%20a%20%3D%20new%20temp()%3B%5Cn%5Cntemp.prototype%20%3D%3D%3D%20a.__proto__%3B%5Cn%5Cntemp.prototype.constructor%20%3D%3D%3D%20temp%3B%22%7D\"></card><p data-lake-id=\"95afef404170e77ccdfaa0fda5677a64\"><br /></p><h3 id=\"02c6fe0b\" data-lake-id=\"0d846c2242593522ef09f59de5aea04b\">2.对象字面量</h3><p data-lake-id=\"3d6064171ab8ffde8681cf4fc4215e36\"><br /></p><p data-lake-id=\"361ebeaa497dd612178001a9f0dea470\">对象字面量即常用的写一对大括号，里面是key-value形式的键值对。该种方式声明对象的原型指向<code>Object.prototype</code>。</p><p data-lake-id=\"eefb10d0b864c458fe0032f2ff46df16\"><br /></p><p data-lake-id=\"e904bab73a5324a0014a2579247f2c62\">或者换种说法，字面量声明对象，默认是使用<code>Object</code>去构造的,即<code>new Object()</code>。</p><p data-lake-id=\"ade60a7860f810a6169fe5cc5a860618\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2215bb9568%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5Cna%20%3D%20%7B%20b%3A1%20%7D%3B%5Cn%5Cnb%20%3D%20new%20Object()%3B%5Cn%5Cna.__proto__%20%3D%3D%3D%20b.__proto__%5Cn%5Cna.__proto__%20%3D%3D%3D%20Object.prototype%22%7D\"></card><p data-lake-id=\"d33c5f8f51bfe1fde0fc2a7b8fe6877a\"><br /></p><h3 id=\"d49ecf0a\" data-lake-id=\"977b24bbc7c8e9bc44f94b49a7fcd7f5\">3.使用Object.create创建对象</h3><p data-lake-id=\"78a79fc91b4ce9bc253182494810483f\"><br /></p><p data-lake-id=\"ac04bc0835d2979c8faa90cc81b55ab5\">调用<code>Object.create</code>后会产生一个新的对象，传入<code>Object.create</code>的参数即为新对象的原型。</p><p data-lake-id=\"da82c3bed7f77f290cbd925dd28c6701\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22ba88432a%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5Cna%20%3D%20%7B%20b%3A1%20%7D%3B%5Cn%5Cnb%20%3D%20Object.create(a)%3B%5Cn%5Cnb.__proto__%20%3D%3D%3D%20a%3B%22%7D\"></card><p data-lake-id=\"0584ea0d3ffd5afc8252f37b56e7ca3e\"><br /></p><p data-lake-id=\"1df3a422ff7980a121c57d8b0ff7a57a\">总结一下，使用new调用构造函数生成新对象，新对象原型指向了构造函数的<code>prototype</code>属性、使用对象字面量的形式创建的对象，原型默认指向了<code>Object.prototype</code>、使用<code>Object.create</code>创建的对象的原型指向了你传入的第一个参数。</p><p data-lake-id=\"3072b74ad156a18f141b4a45ea0ce3c4\"><br /></p><h2 id=\"b5a146f5\" data-lake-id=\"d6cf6e52780883c543ff6cbfdefd6e33\">一张关于原型的经典的图</h2><p data-lake-id=\"3c4828af21a12ab982e9bd72e299cb51\"><br /></p><p data-lake-id=\"90afbdc0fed9e73ca0f1ed8c0d9b9c1d\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F284138%2F1551942034925-da8c0fe2-7a0f-4ee4-b292-43f6c18a1431.png%22%2C%22originWidth%22%3A733%2C%22originHeight%22%3A740%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22margin%22%3A%7B%22top%22%3Afalse%2C%22bottom%22%3Afalse%7D%2C%22width%22%3A733%2C%22height%22%3A740%7D\"></card></p><p data-lake-id=\"c47408dd1d1044641094ee91779e3980\"><br /></p><p data-lake-id=\"52aeb02b156145899fe9dee2260e3f12\">这里存在一个的问题，众所周知JS里函数也是对象，那么函数是由谁构造的呢？那么函数的<code>__proto__</code>指向谁呢？</p><p data-lake-id=\"deeed207286e300fc4ce4958df39c5c4\"><br /></p><p data-lake-id=\"f28e92326a61c336e4868e0d875e332d\">先看图中中间一部分，声明了三个函数，Foo函数，Object函数，Function函数。</p><p data-lake-id=\"8a0d4759357115c660ff808a5f9e10e6\"><br /></p><p data-lake-id=\"abca7e263fc9523cab7386cb1d809edf\">然后从上到下一个一个说，</p><p data-lake-id=\"00da5688ab3cc8a3ee625d097ecf82b3\"><br /></p><h3 id=\"d2cb3dfb\" data-lake-id=\"d6a8b8beec534002a970e85c8c35cd46\">1.Foo函数</h3><p data-lake-id=\"e134a9779da23722ac1ac4d0afd2cdd8\"><br /></p><p data-lake-id=\"fcbc7919667c630fa0d4301fc1c953c1\">Foo函数有它的<code>prototype</code>属性，且<code>prototype.constructor</code>指回了Foo函数本身。</p><p data-lake-id=\"158b5be44cceeed5bc1ac14a14ec41ac\"><br /></p><p data-lake-id=\"2479c9667b9a40aa6ba3908c7cdbffb7\">f1/f2 是通过<code>new Foo()</code>生成的新对象，它俩的<code>__proto__</code>属性都指向了<code>Foo.prototype</code>。</p><p data-lake-id=\"ab4b5696911092626a9daa4b063d9dff\"><br /></p><p data-lake-id=\"009c69035a0faf44fe5608785cfc03ee\"><code>Foo.prototype</code>只是一个对象，所以它也有自己的原型，即<code>__proto__</code>属性，在你没修改情况下，指向了<code>Object.prototype</code>。</p><p data-lake-id=\"2c58d6f870bcc9c5615460265f60b164\"><br /></p><p data-lake-id=\"636cd863de1f8ffd0e9ad9dbb7b01ee5\">Foo函数本身也是一个对象，意味着它有自己的原型<code>__proto__</code>，指向了<code>Function.prototype</code>，这条线意味着，<strong>函数都是通过内置的<code>Function</code>函数构造出来的</strong>。</p><p data-lake-id=\"face0e7bb552f3f326d0aef9ba785255\"><br /></p><p data-lake-id=\"7e66277ec35d4a8c5f9730cd84c1f898\">至此图中所有指向都明晰了。</p><p data-lake-id=\"6431c8b8d901153854c412014ec9556f\"><br /></p><h3 id=\"e160e5ca\" data-lake-id=\"fbb0a3c5043a080839c8bf537845ab30\">2.Object函数</h3><p data-lake-id=\"6ef60a110fa0e97959764cf88f9dd993\"><br /></p><p data-lake-id=\"93d52838ffe537a2e7338a5835894da2\">Object函数基本上和Foo函数的指向是一样的，毕竟他们都是函数，只不过Object是内置的，Foo是你写的，还有一点不同在他们的<code>prototype</code>属性上。</p><p data-lake-id=\"4c99cc08103be6b0db2de72a34b9e285\"><br /></p><p data-lake-id=\"f6ff7119cb223dc7d6d48de5339b0113\">Object函数有自己的<code>prototype</code>属性，且<code>prototype.constructor</code>指回了Object函数本身。</p><p data-lake-id=\"3633ffeaf7f7bcd16f9563845c90775b\"><br /></p><p data-lake-id=\"e0808209d587152bd7362dc296a3caae\">f1/f2 是通过<code>new Object()</code>生成的新对象，它俩的<code>__proto__</code>属性都指向了<code>Object.prototype</code>。</p><p data-lake-id=\"865134c4d0a458cc704c306cedb171d5\"><br /></p><p data-lake-id=\"758cf998feac40b0cffc7494458baf2b\"><code>Object.prototype</code>只是一个对象，所以它也有自己的原型，即<code>__proto__</code>属性，Object函数不同点就在于此，<code>Object.prototype.__proto__</code>值为<code>null</code>。即原型链在此终结。</p><p data-lake-id=\"a438fdd69d7d6449e8461a2bedc5cd0d\"><br /></p><p data-lake-id=\"5120af8a0f9aff83afb8ce18263a9d0d\">Object函数本身也是一个对象，意味着它有自己的原型<code>__proto__</code>，指向了<code>Function.prototype</code>，这条线意味着，<strong>函数都是通过内置的<code>Function</code>函数构造出来的</strong>。</p><p data-lake-id=\"0c65148e9103a3f161cf2b641d497a7a\"><br /></p><h3 id=\"cf908962\" data-lake-id=\"5e1d0e83b375b048f8dfea1f613a34ea\">3.Function函数</h3><p data-lake-id=\"e4e60a3209a463be2f27f171eafcc7c6\"><br /></p><p data-lake-id=\"4e485dca8ee69f4c4c3b688035676d4a\">Function函数也是内置的，且所有函数都是通过它构造出来的，包括它自己。所以，你可以说，<strong>默认情况下，所有函数的__proto__属性都指向Function.prototype</strong>。</p><p data-lake-id=\"ac18ecf69d937e934e33e31a801e25f8\"><br /></p><p data-lake-id=\"cf5c412f7f6aa5a6d01a2cf80b96db69\">所以上图中，<code>Foo.__proto__</code>、<code>Object.__proto__</code>、<code>Function.__proto__</code> 都指向了<code>Function.prototype</code>。</p><p data-lake-id=\"34fd562093d32026a13e13566748a8bd\"><br /></p><p data-lake-id=\"5d1e7d9c7d31df8eb6e6633d5e289b52\">其它指向不出其外。</p><p data-lake-id=\"3b5549688ec1fae13f1cd8319d87c359\"><br /></p><p data-lake-id=\"95ae8c42cbab5154c22776e83dd05621\">Function函数有自己的<code>prototype</code>属性，且<code>prototype.constructor</code>指回了Function函数本身。</p><p data-lake-id=\"890cbb61fddf4928595ac8de042b3e62\"><br /></p><p data-lake-id=\"751d1782195c111c960ef1f3d208e794\"><code>Function.prototype</code>只是一个对象，所以它也有自己的原型，即<code>__proto__</code>属性，在你没修改情况下，指向了<code>Object.prototype</code>。</p><p data-lake-id=\"470257ffbff08ad0eedbc557452f8c66_p_84\"><br /></p><p data-lake-id=\"bd02ded472df593f8e23bb50569c5ce4_p_85\"><br /></p><p data-lake-id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\"><br /></p><p data-lake-id=\"bd67236b6b40e1ddeba66aa4c905c5af_p_87\"><br /></p><p data-lake-id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\"><br /></p><p data-lake-id=\"ab51a4ad9cb9ee48199bb5c9fc6715a2_p_89\"><br /></p><p data-lake-id=\"700ece5e21ebc17eb29d438c814531fe_p_90\"><br /></p><p data-lake-id=\"2585884a100de0fae153ff935c1040bf_p_91\"><br /></p>",
  "body_draft_lake": "",
  "public": 1,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2021-01-29T08:47:58.000Z",
  "deleted_at": null,
  "created_at": "2019-03-07T07:00:18.000Z",
  "updated_at": "2021-01-29T08:47:58.000Z",
  "published_at": "2021-01-29T08:47:58.000Z",
  "first_published_at": "2019-03-07T07:01:45.000Z",
  "word_count": 1393,
  "cover": "https://cdn.nlark.com/yuque/0/2019/png/284138/1551942034925-da8c0fe2-7a0f-4ee4-b292-43f6c18a1431.png",
  "description": "原型（prototype）是什么？原型并不神秘，它实际也就是一个对象或者是null。JavaScript里每个对象都有一个与之相关连的原型，你可以通过访问对象的__proto__属性，或者使用Object.getPrototypeOf来找到它。你可以使用Object.setPrototypeO...",
  "custom_description": null,
  "hits": 66,
  "_serializer": "v2.doc_detail"
}