{
  "id": 1461310,
  "slug": "omnvf8",
  "title": "【转载】Webpack入门",
  "book_id": 231593,
  "book": {
    "id": 231593,
    "type": "Book",
    "slug": "web",
    "name": "WEB",
    "user_id": 284138,
    "description": "前端知识点记录",
    "creator_id": 284138,
    "public": 1,
    "items_count": 58,
    "likes_count": 0,
    "watches_count": 3,
    "content_updated_at": "2023-02-02T09:09:21.426Z",
    "updated_at": "2023-02-02T09:09:21.000Z",
    "created_at": "2019-03-07T05:05:08.000Z",
    "namespace": "zackdk/web",
    "user": {
      "id": 284138,
      "type": "User",
      "login": "zackdk",
      "name": "行一度空山",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
      "books_count": 2,
      "public_books_count": 1,
      "followers_count": 5,
      "following_count": 0,
      "created_at": "2019-03-07T05:02:38.000Z",
      "updated_at": "2023-02-01T12:18:25.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 284138,
  "creator": {
    "id": 284138,
    "type": "User",
    "login": "zackdk",
    "name": "行一度空山",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
    "books_count": 2,
    "public_books_count": 1,
    "followers_count": 5,
    "following_count": 0,
    "created_at": "2019-03-07T05:02:38.000Z",
    "updated_at": "2023-02-01T12:18:25.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "![](https://cdn.nlark.com/yuque/0/2019/png/284138/1554173071570-3d99c43c-f0b9-4f16-ade0-de832a7fba5f.png#align=left&display=inline&height=421&originHeight=604&originWidth=1071&size=0&status=done&width=746)\n\n<a name=\"4e20f1f8\"></a>\n### 什么是 webpack\n\nwebpack 可以看做是模块打包机：他做的事情是，分析你的项目结构，找到 `JavaScript` 模块以及其他的一些浏览器不能直接运行的扩展语言（`Scss`、`TypeScript` 等），将其打包为合适的格式以供浏览器使用\n\n构建就是把源代码转换成发布到线上可执行的 `JavaScript`、CSS、HTML 代码，包括以下内容：\n\n- **代码转换**：`TypeScript` 编译成 `JavaScript`、`SCSS` 编译成 CSS 等等\n- **文件优化**：压缩 `JavaScript`、CSS、HTML 代码，压缩合并图片等\n- **代码分割**：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载\n- **模块合并**：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件\n- **自动刷新**：监听本地源代码的变化，自动构建，刷新浏览器\n- **代码校验**：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过\n- **自动发布**：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n构建其实是工程化、自动化思想在前端开发中的体现。把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。\n<a name=\"6f286eea\"></a>\n#### webpack 的基本概念\n\n- [入口(entry point)](https://www.webpackjs.com/concepts/entry-points/): 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始，webpack 会找出有哪些模块和 library 是入口起点（直接和间接）依赖的。\n   - 默认值是 `./src/index.js`，然而，可以通过在 webpack 配置中配置 entry 属性，来指定一个不同的入口起点（或者也可以指定多个入口起点）。\n- [出口 output](https://www.webpackjs.com/concepts/output/): 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，主输出文件默认为 `./dist/main.js`，其他生成文件的默认输出目录是 `./dist`\n- [loader](https://www.webpackjs.com/concepts/loaders/): 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n\n> 注意，loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。\n\n\n- [插件 plugins](https://www.webpackjs.com/concepts/plugins/): loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n- [模式 mode](https://www.webpackjs.com/concepts/mode/): 通过选择 `development` 或 `production` 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化\n\n<a name=\"9de5d825\"></a>\n#### webpack 构建过程\n\n1. 从 Entry 里配置的 Module 开始递归解析 Entry 依赖的所有 Module。\n2. 每找到一个 Module， 就会根据配置的 Loader 去找出对应的转换规则。\n3. 对 Module 进行转换后，再解析出当前 Module 依赖的 Module。\n4. 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 Chunk。\n5. 最后 Webpack 会把所有 Chunk 转换成文件输出。\n6. 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。\n\n<a name=\"9030fa6f\"></a>\n### 开发环境和生产环境\n\n我们在日常的前端开发工作中，一般都会有两套构建环境：一套开发时使用，一套供线上使用。\n\n- **development**: 用于开发的配置文件，用于定义 `webpack dev server` 和其他东西\n- **production**: 用于生产的配置文件，用于定义 `UglifyJSPlugin`，`sourcemaps` 等\n\n简单来说，开发时可能需要打印 debug 信息，包含 `sourcemap` 文件，而生产环境是用于线上的即代码都是压缩后，运行时不打印 debug 信息等。譬如 axios、antd 等我们的生产环境中需要使用到那么我们应该安装该依赖在生产环境中，而 `webpack-dev-server` 则是需要安装在开发环境中\n\n平时我们 `npm` 中安装的文件中有 -S -D, -D 表示我们的依赖是安装在开发环境的，而-S 的是安装依赖在生产环境中。\n\n本文就来带你搭建基本的前端开发环境，前端开发环境需要什么呢？\n\n- 构建发布需要的 HTML、CSS、JS、图片等资源\n- 使用 CSS 预处理器，这里使用 less\n- 配置 babel 转码器 => 使用 es6+\n- 处理和压缩图片\n- 配置热加载，HMR\n\n以上配置就可以满足前端开发中需要的基本配置。下面是本文打包后的效果图：\n\n![](https://cdn.nlark.com/yuque/0/2019/png/284138/1554173071637-19098e48-7817-45c2-9d36-d14e5af42a5a.png#align=left&display=inline&height=277&originHeight=528&originWidth=1420&size=0&status=done&width=746)\n\n<a name=\"c10e97bc\"></a>\n### 搭建基本的开发环境\n\n<a name=\"e655a410\"></a>\n### 安装\n\n```\nmkdir webpack-dev && cd webpack-dev\nnpm init -y\nnpm i webpack webpack-cli -D\n```\n\n<a name=\"b3604875\"></a>\n### 添加 scripts\n\n生成了 package.json 文件，在文件中添加\n\n```json\n\"scripts\": {\n    \"build\": \"webpack --mode production\"\n  }\n```\n\n> --`mode` 模式 (必选，不然会有 `WARNING`)，是 `webpack4` 新增的参数选项，默认是 `production`\n\n\n- `--mode production` 生产环境\n   - 提供 `uglifyjs-webpack-plugin` 代码压缩\n   - 不需要定义 `new webpack.DefinePlugin({ \"process.env.NODE_ENV\": JSON.stringify(\"production\") })` 默认 `production`\n   - 默认开启 `NoEmitOnErrorsPlugin -> optimization.noEmitOnErrors`, 编译出错时跳过输出，以确保输出资源不包含错误\n   - 默认开启 `ModuleConcatenationPlugin` -> `optimization.concatenateModules`, `webpack3` 添加的作用域提升(`Scope Hoisting`)\n- `--mode development` 开发环境\n   - 使用 eval 构建 module, 提升增量构建速度\n   - 不需要定义 `new webpack.DefinePlugin({ \"process.env.NODE_ENV\": JSON.stringify(\"development\") })` 默认 `development`\n   - 默认开启 `NamedModulesPlugin -> optimization.namedModules` 使用模块热替换(HMR)时会显示模块的相对路径\n\n添加了 scripts 之后，新建`src/index.js`，然后执行`npm run build` ，你就会发现新增了一个 `dist` 目录，里边存放的是 webpack 构建好的 `main.js` 文件。\n\nps [npm scripts 使用指南](http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html)\n\n<a name=\"16b18c0c\"></a>\n### 新建 webpack.config.js 文件\n\n要想对 webpack 中增加更多的配置信息，我们需要建立一个 webpack 的配置文件。在根目录下创建 `webpack.config.js` 后再执行 `webpack` 命令，webpack 就会使用这个配置文件的配置了\n\n配置中具备以下的基本信息：\n\n```javascript\nmodule.exports = {\n  entry: '', // 打包入口：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始\n  output: '', // 出口\n  resolve: {}, // 配置解析：配置别名、extensions 自动解析确定的扩展等等\n  devServer: {}, // 开发服务器：run dev/start 的配置，如端口、proxy等\n  module: {}, // 模块配置：配置loader（处理非 JavaScript 文件，比如 less、sass、jsx、图片等等）等\n  plugins: [] // 插件的配置：打包优化、资源管理和注入环境变量\n}\n```\n\n<a name=\"37d64eb2\"></a>\n#### 配置打包入口和出口\n\n首先我们往 `webpack.config.js` 添加点配置信息\n\n```javascript\nconst path = require('path')\n\nmodule.exports = {\n  // 指定打包入口\n  entry: './src/index.js',\n\n  // 打包出口\n  output: {\n    path: path.resolve(__dirname, 'dist'), // 解析路径为 ./dist\n    filename: 'bundle.js'\n  }\n}\n```\n\n上面我们定义了打包入口 `./src/index.js`，打包出口为 `./dist`, 打包的文件夹名字为`bundle.js`，执行`npm run build`命令后，index.js 文件会被打包为 `bundle.js` 文件。此时随便建立一个 html 文件引用这个`bundle.js`就可以看到你在`index.js` 写的代码了。\n\n[path.resolve([...paths])](http://nodejs.cn/api/path.html#path_path_resolve_paths) 方法会把一个路径或路径片段的序列解析为一个绝对路径。\n\n<a name=\"375b0d69\"></a>\n### 使用 html-webpack-plugin 创建 html 文件\n\n更多情况下我们不希望打包一次，就新建一次 html 文件来引用打包后的文件，这样显得不智能或者说当你打包的文件名修改后，引用路径就会出错。\n\n这个时候我们就可以使用 [html-webpack-plugin](https://webpack.docschina.org/plugins/html-webpack-plugin/) 插件来将 HTML 引用路径和我们的构建结果关联起来。\n\n```\nnpm install html-webpack-plugin -D\n```\n\n创建文件`public/index.html` 修改 `webpack.config.js` 文件\n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  //...\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html', // 配置输出文件名和路径\n      template: './public/index.html' // 配置要被编译的html文件\n    })\n  ]\n}\n```\n\n重新执行 `npm run build`, dist 目录就会多个 `index.html` 并引入了 `bundle.js`.\n\n<a name=\"b1ee22d8\"></a>\n#### 压缩 html 文件\n\n修改 `webpack.config.js`\n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  //...\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html', // 配置输出文件名和路径\n      template: './public/index.html', // 配置要被编译的html文件\n      hash: true,\n      // 压缩 => production 模式使用\n      minify: {\n        removeAttributeQuotes: true, //删除双引号\n        collapseWhitespace: true //折叠 html 为一行\n      }\n    })\n  ]\n}\n```\n\n<a name=\"c384ec3d\"></a>\n### 打包 css 文件\n\n我们希望使用 webpack 来进行构建 css 文件，，为此，需要在配置中引入 loader 来解析和处理 CSS 文件：\n\n```\nnpm install style-loader css-loader -D\n```\n\n新建 `src/assets/style/color.css`, 修改 `webpack.config.js` 文件：\n\n```javascript\nmodule.exports = {\n  //...\n  module: {\n    /**\n     * test: 匹配特定条件。一般是提供一个正则表达式或正则表达式的数组\n     * include: 匹配特定条件。一般是提供一个字符串或者字符串数组\n     * exclude: 排除特定条件\n     * and: 必须匹配数组中的所有条件\n     * or: 匹配数组中任何一个条件,\n     * nor: 必须排除这个条件\n     */\n    rules: [\n      {\n        test: /\\.css$/,\n        include: [path.resolve(__dirname, 'src')],\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }\n  //...\n}\n```\n\n经由上述两个 loader 的处理后，CSS 代码会转变为 JS， 如果需要单独把 CSS 文件分离出来，我们需要使用 [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) 插件\n\n<a name=\"c5dabdd6\"></a>\n#### 抽取 css 到独立文件, 自动添加前缀\n\n```\nnpm i mini-css-extract-plugin postcss-loader autoprefixer -D\n```\n\n我们在写 css 时不免要考虑到浏览器兼容问题，如 `transform` 属性，需要添加浏览器前缀以适配其他浏览器。故使用到 `postcss-loader` 这个 loader， 下面则是相关的配置\n\n`webpack.config.js`\n\n```javascript\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        include: [path.resolve(__dirname, 'src')],\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: [require('autoprefixer')]\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    //...\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n      chunkFilename: '[id].css'\n    })\n  ]\n}\n```\n\n<a name=\"3588ae19\"></a>\n#### 打包 less 文件\n\n开发中通常会用到一门预处理语言，这里以`less`为例，通过`less-loader`可以打包 less 为 css 文件\n\n```\nnpm install less less-loader -D\n```\n\n新建 `src/assets/style/index.less`, 并且在 `src/index.js` 中引入 `import './assets/style/index.less'`\n\n配置 `webpack.config.js`\n\n```javascript\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.less$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: [require('autoprefixer')] // 添加css中的浏览器前缀\n            }\n          },\n          'less-loader'\n        ]\n      }\n    ]\n  }\n  //...\n}\n```\n\n执打包命令后就可以发现 `index.less` 中写的样式会和`color.css`一样被打包进 `main.css`中。\n\n[webpack@v4 升级踩坑](https://segmentfault.com/a/1190000014396803?utm_source=tag-newest): 关于使用 `mini-css-extract-plugin` 的注意点。\n\n<a name=\"fc1b66fb\"></a>\n### 打包图片\n\n```\nnpm install file-loader url-loader -D\n```\n\n**file-loader:** 可以用于处理很多类型的文件，它的主要作用是直接输出文件，把构建后的文件路径返回。\n\n**url-loader:**<br />如果图片较多，会发很多 http 请求，会降低页面性能。`url-loader` 会将引入的图片编码，生成 dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片了。当然，如果图片较大，编码会消耗性能。因此 `url-loader` 提供了一个 limit 参数，小于 limit 字节的文件会被转为 DataURl，大于 limit 的还会使用 `file-loader` 进行 copy。\n\n- url-loader 可以看作是增强版的 file-loader。\n- url-loader 把图片编码成 base64 格式写进页面，从而减少服务器请求。\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              outputPath: 'images/', //输出到images文件夹\n              limit: 500 //是把小于500B的文件打成Base64的格式，写入JS\n            }\n          }\n        ]\n      }\n    ]\n  }\n  //...\n}\n```\n\n**url-loader 和 file-loader 是什么关系呢？**\n\n简单地说，`url-loader` 封装了 `file-loader`。`url-loader` 不依赖于 `file-loader`，即使用 `url-loader` 时，只需要安装 `url-loader` 即可，不需要安装 `file-loader`，因为 `url-loader` 内置了 `file-loader`。\n\n通过上面的介绍，我们可以看到，url-loader 工作分两种情况：\n\n- 文件大小小于 limit 参数，url-loader 将会把文件转为 DataURL；\n- 文件大小大于 limit，url-loader 会调用 file-loader 进行处理，参数也会直接传给 file-loader。因此我们只需要安装 url-loader 即可。\n\n有关 `url-loader` 和 `file-loader` 的解析：[webpack 之图片引入-增强的 file-loader：url-loader](https://blog.csdn.net/hdchangchang/article/details/80175782)\n\n<a name=\"3b16a2cc\"></a>\n### 配置 babel\n\n<a name=\"babel-loader\"></a>\n#### babel-loader\n\n`Babel` 是一个让我们能够使用 ES 新特性的 JS 编译工具，我们可以在 webpack 中配置 Babel，以便使用 ES6、ES7 标准来编写 JS 代码。\n\nBabel 7 的相关依赖包需要加上 `@babel` scope。一个主要变化是 presets 设置由原来的 `env` 换成了 `@babel/preset-env`, 可以配置 `targets`, `useBuiltIns` 等选项用于编译出兼容目标环境的代码。其中 `useBuiltIns` 如果设为 `\"usage\"`，Babel 会根据实际代码中使用的 ES6/ES7 代码，以及与你指定的 targets，按需引入对应的 `polyfill`，而无需在代码中直接引入 `import '@babel/polyfill'`，避免输出的包过大，同时又可以放心使用各种新语法特性。\n\n```\nnpm i babel-loader @babel/core @babel/preset-env -D\n```\n\n笔者这里配的版本号如下\n\n```json\n{\n  \"babel-loader\": \"^8.0.4\",\n  \"@babel/core\": \"^7.1.2\",\n  \"@babel/preset-env\": \"^7.1.0\"\n}\n```\n\n- [babel-loader](https://www.npmjs.com/package/babel-loader): 用 babel 转换 ES6 代码需要使用到 `babel-loader`\n- [@babel-preset-env](https://www.npmjs.com/package/@babel/preset-env)： 默认情况下是等于 ES2015 + ES2016 + ES2017，也就是说它对这三个版本的 ES 语法进行转化。\n- [@babel/core](https://www.npmjs.com/package/@babel/core)：babel 核心库\n\n根目录下新建 `.babelrc` 文件\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"modules\": false,\n        \"targets\": {\n          \"browsers\": [\"> 1%\", \"last 2 versions\", \"not ie <= 8\"]\n        },\n        \"useBuiltIns\": \"usage\"\n      }\n    ]\n  ]\n}\n```\n\n- presets 是一堆 plugins 的预设，起到方便的作用。\n- plugins 是编码转化工具，babel 会根据你配置的插件对代码进行相应的转化。\n\n修改 `webpack.config.js`\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      //...\n      {\n        test: /\\.m?js$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n          loader: 'babel-loader'\n        }\n      }\n    ]\n  }\n}\n```\n\n<a name=\"f0b8ee03\"></a>\n#### babel/polyfill 和 transform-runtime\n\n> Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。\n\n\n- babel-polyfill: 如上述所说，对于新的 API，你可能需要引入 babel-polyfill 来进行兼容\n- 关键点\n   - babel-polyfill 是为了模拟一个完整的 ES2015+环境，旨在用于应用程序而不是库/工具。\n   - babel-polyfill 会污染全局作用域\n\nbabel-runtime 的作用：\n\n- **提取辅助函数**。ES6 转码时，babel 会需要一些辅助函数，例如 _extend。babel 默认会将这些辅助函数内联到每一个 js 文件里， babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 babel-runtime 中，这样做能减小项目文件的大小。\n- **提供 polyfill**：不会污染全局作用域，但是不支持实例方法如 Array.includes\n\n`babel-runtime` 更像是分散的 polyfill 模块，需要在各自的模块里单独引入，借助 `transform-runtime` 插件来自动化处理这一切，也就是说你不要在文件开头 import 相关的 `polyfill`，你只需使用，`transform-runtime` 会帮你引入。\n\n对于开发应用来说，直接使用上述的按需 `polyfill` 方案是比较方便的，但如果是开发工具、库的话，这种方案未必适合（`babel-polyfill` 是通过向全局对象和内置对象的 `prototype` 上添加方法实现的，会造成全局变量污染）。Babel 提供了另外一种方案 `transform-runtime`，它在编译过程中只是将需要 `polyfill` 的代码引入了一个指向 `core-js` 中对应模块的链接(alias)。关于这两个方案的具体差异和选择，可以自行搜索相关教程，这里不再展开，下面提供一个 `transform-runtime` 的参考配置方案。\n\n- 首先安装 runtime 相关依赖\n\n```\nnpm i @babel/plugin-transform-runtime -D\nnpm i @babel/runtime -S\n```\n\n修改 `.babelrc`\n\n```json\n{\n  //...\n  \"plugins\": [\"@babel/plugin-transform-runtime\"]\n}\n```\n\n<a name=\"de6d1476\"></a>\n### 打包前清理源目录文件 clean-webpack-plugin\n\n每次打包，都会生成项目的静态资源，随着某些文件的增删，我们的 dist 目录下可能产生一些不再使用的静态资源，webpack 并不会自动判断哪些是需要的资源，为了不让这些旧文件也部署到生产环境上占用空间，所以在 webpack 打包前最好能清理 dist 目录。\n\n```\nnpm install clean-webpack-plugin -D\n```\n\n修改 `webpack.config.js` 文件\n\n```javascript\nconst CleanWebpackPlugin = require('clean-webpack-plugin')\nmodule.exports = {\n  plugins: [new CleanWebpackPlugin(['dist'])]\n}\n```\n\n<a name=\"b8f9cc52\"></a>\n### 提取公用代码\n\n假如你 `a.js` 和 `b.js` 都 import 了 `c.js` 文件，这段代码就冗杂了。为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。\n\n```javascript\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          // 抽离自己写的公共代码\n          chunks: 'initial',\n          name: 'common', // 打包后的文件名，任意命名\n          minChunks: 2, //最小引用2次\n          minSize: 0 // 只要超出0字节就生成一个新包\n        },\n        styles: {\n          name: 'styles', // 抽离公用样式\n          test: /\\.css$/,\n          chunks: 'all',\n          minChunks: 2,\n          enforce: true\n        },\n        vendor: {\n          // 抽离第三方插件\n          test: /node_modules/, // 指定是node_modules下的第三方包\n          chunks: 'initial',\n          name: 'vendor', // 打包后的文件名，任意命名\n          // 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包\n          priority: 10\n        }\n      }\n    }\n  }\n}\n```\n\n<a name=\"hash\"></a>\n### hash\n\nhash 是干嘛用的？<br />我们每次打包出来的结果可能都是同一个文件，那我上线的时候是不是要替换掉上线的 js，那我怎么知道哪是最新的呢，我们一般会清一下缓存。而 hash 就是为了解决这个问题而存在的\n\n我们此时在改一些 webpack.config.js 的配置\n\n```javascript\nmodule.exports = {\n  //...\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[hash:8].js'\n  },\n  //...\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].[hash:8].css',\n      chunkFilename: '[id].[hash:8].css'\n    })\n  ]\n}\n```\n\n<a name=\"d541b9ea\"></a>\n### 减少 resolve 的解析，配置别名\n\n如果我们可以精简 `resolve` 配置，让 `webpack` 在查询模块路径时尽可能快速地定位到需要的模块，不做额外的查询工作，那么 `webpack` 的构建速度也会快一些\n\n```javascript\nmodule.exports = {\n  resolve: {\n    /**\n     * alias: 别名的配置\n     *\n     * extensions: 自动解析确定的扩展,\n     *    比如 import 'xxx/theme.css' 可以在extensions 中添加 '.css'， 引入方式则为 import 'xxx/theme'\n     *    @default ['.wasm', '.mjs', '.js', '.json']\n     *\n     * modules 告诉 webpack 解析模块时应该搜索的目录\n     *   如果你想要添加一个目录到模块搜索目录，此目录优先于 node_modules/ 搜索\n     *   这样配置在某种程度上可以简化模块的查找，提升构建速度 @default node_modules 优先\n     */\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n      tool$: path.resolve(__dirname, 'src/utils/tool.js') // 给定对象的键后的末尾添加 $，以表示精准匹配\n    },\n    extensions: ['.wasm', '.mjs', '.js', '.json', '.jsx'],\n    modules: [path.resolve(__dirname, 'src'), 'node_modules']\n  }\n}\n```\n\n<a name=\"webpack-dev-serve\"></a>\n### webpack-dev-serve\n\n上面讲到了都是如何打包文件，但是开发中我们需要一个本地服务，这时我们可以使用 `webpack-dev-server` 在本地开启一个简单的静态服务来进行开发。\n\n`webpack-dev-server` 是 webpack 官方提供的一个工具，可以基于当前的 webpack 构建配置快速启动一个静态服务。当 `mode` 为 `development` 时，会具备 `hot reload` 的功能，即当源码文件变化时，会即时更新当前页面，以便你看到最新的效果。...\n\n```\nnpm install webpack-dev-server -D\n```\n\npackage.json 中 scripts 中添加\n\n```\n\"start\": \"webpack-dev-server --mode development\"\n```\n\n默认开启一个本地服务的窗口 [http://localhost:8080/](http://localhost:8080/) 便于开发\n\n<a name=\"31c0be61\"></a>\n#### 配置开发服务器\n\n我们可以对 `webpack-dev-server` 做针对性的配置\n\n```javascript\nmodule.exports = {\n  // 配置开发服务器\n  devServer: {\n    port: 1234,\n    open: true, // 自动打开浏览器\n    compress: true // 服务器压缩\n    //... proxy、hot\n  }\n}\n```\n\n- contentBase: 服务器访问的根目录（可用于访问静态资源）\n- port: 端口\n- open: 自动打开浏览器\n\n<a name=\"53985000\"></a>\n### 模块热替换(hot module replacement)\n\n模块热替换(`HMR - Hot Module Replacement`)功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：\n\n- 保留在完全重新加载页面时丢失的应用程序状态。\n- 只更新变更内容，以节省宝贵的开发时间。\n- 调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。\n\n上面我们 `npm start` 后修改一次文件，页面就会刷新一次。这样就存在很大问题了，比如我们使用 `redux`, `vuex` 等插件，页面一刷新那么存放在 `redux`, `vuex` 中的东西就会丢失，非常不利于我们的开发。\n\nHMR 配合 webpack-dev-server ，首先我们配置下 webpack.config.js\n\n```javascript\nconst webpack = require('webpack')\n\nmodule.exports = {\n  devServer: {\n    //...\n    hot: true\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n    //...\n  ]\n}\n```\n\n配置后还不行，因为 webpack 还不知道你要更新哪里, 修改 `src/index.js` 文件, 添加\n\n```javascript\nif (module.hot) {\n  module.hot.accept()\n}\n```\n\n重启服务，`npm start` 之后，修改引入 `index.js` 文件后，页面就不会重新刷新了，这便实现了 HMR\n\n但是但是有个问题是，你修改 css/less 等样式文件并未发生改变， what ?\n\nHMR 修改样式表 需要借助于 `style-loader`， 而我们之前用的是 `MiniCssExtractPlugin.loader`， 这也好办，修改其中一个 rules 就可以了，我们可以试试改\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          // MiniCssExtractPlugin.loader,\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: [require('autoprefixer')] // 添加css中的浏览器前缀\n            }\n          },\n          'less-loader'\n        ]\n      }\n    ]\n  }\n}\n```\n\n这样我们修改 less 文件就会发现 HMR 已经实现了。\n\n其实，我们可以发现，dev 下配置的 loader 为 `style-loader` , 而生产环境下则是需要 `MiniCssExtractPlugin.loader`\n\n这就涉及到了不同环境之间的配置。可以通过 `process.env.NODE_ENV` 获取当前是开发环境或者是生产环境，然后配置不同的 loader，这里就不做展开了。下一篇文章打算在做一个 `react-cli` 或者 `vue-cli` 的配置，将开发环境的配置与生产环境的配置分开为不同的文件。\n\n<a name=\"433531fd\"></a>\n### 结语\n\n前面讲到的知识都是 webpack 的一些基础的知识，更多的资料可以查询[webpack 中文官网](https://webpack.js.org/)，官网讲的比较详细，我这里也是讲最常的配置，也是一篇入门系列的文章，文中涉及的知识点还有很多地方还需要完善，譬如 优化 webpack 的构建速度， 减小打包的体积等等。\n\n学习 `webpack 4.0` 还需要多实践，多瞎搞，笔者也是刚刚学习 webpack 的配置，不对之处请各位指出。\n\n下一篇文章打算从零配置一个脚手架，以加深自己对 webpack 的理解。\n\n本文产生的代码：[webpack-dev](https://github.com/gershonv/my-code-store/tree/master/webpack/webpack-dev)\n\n<a name=\"d17a0f0b\"></a>\n### 参考\n\n- [webpack4.x 入门一篇足矣](https://juejin.im/post/5b2b9a00e51d45587b48075e#heading-0)\n- [Webpack4 不深不浅的实践教程](https://segmentfault.com/a/1190000014466696?utm_source=index-hottest/*&%5E%25$#articleHeader0)\n- [webpack 之 babel 配置和 HMR](https://juejin.im/post/5b3834e051882574ce2f3dd9)\n- [使用 webpack 4 和 Babel 7 配置 Vue.js 工程模板](https://segmentfault.com/a/1190000015247255)\n- [webpack 4 ：从 0 配置到项目搭建](https://juejin.im/post/5b3daf2ee51d451962727fbe)\n- [webpack 详解](https://juejin.im/post/5aa3d2056fb9a028c36868aa)\n- [手写一个 webpack4.0 配置](https://juejin.im/post/5b4609f5e51d4519596b66a7)\n- [Webpack 4 教程：从零配置到生产发布（2018）](https://juejin.im/entry/5b552985f265da0f697036b2)\n- [Webpack 揭秘——走向高阶前端的必经之路](https://juejin.im/post/5badd0c5e51d450e4437f07a)\n- [珠峰架构师培训公开课 webpack4.0 进阶](https://www.bilibili.com/video/av25439651?from=search&seid=14183256954711376795)\n- [webpack 官网](https://webpack.js.org/)\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/284138/1554173071570-3d99c43c-f0b9-4f16-ade0-de832a7fba5f.png#align=left&amp;display=inline&amp;height=421&amp;originHeight=604&amp;originWidth=1071&amp;size=0&amp;status=done&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"4e20f1f8\">什么是 webpack</h3><p><br /></p><p>webpack 可以看做是模块打包机：他做的事情是，分析你的项目结构，找到 <code>JavaScript</code> 模块以及其他的一些浏览器不能直接运行的扩展语言（<code>Scss</code>、<code>TypeScript</code> 等），将其打包为合适的格式以供浏览器使用</p><p><br /></p><p>构建就是把源代码转换成发布到线上可执行的 <code>JavaScript</code>、CSS、HTML 代码，包括以下内容：</p><p><br /></p><ul><li><strong>代码转换</strong>：<code>TypeScript</code> 编译成 <code>JavaScript</code>、<code>SCSS</code> 编译成 CSS 等等</li><li><strong>文件优化</strong>：压缩 <code>JavaScript</code>、CSS、HTML 代码，压缩合并图片等</li><li><strong>代码分割</strong>：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载</li><li><strong>模块合并</strong>：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件</li><li><strong>自动刷新</strong>：监听本地源代码的变化，自动构建，刷新浏览器</li><li><strong>代码校验</strong>：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过</li><li><strong>自动发布</strong>：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><p><br /></p><p>构建其实是工程化、自动化思想在前端开发中的体现。把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。</p><h4 id=\"6f286eea\">webpack 的基本概念</h4><p><br /></p><ul><li><a href=\"https://www.webpackjs.com/concepts/entry-points/\" target=\"_blank\">入口(entry point)</a>: 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始，webpack 会找出有哪些模块和 library 是入口起点（直接和间接）依赖的。</li></ul><ul data-lake-indent=\"1\"><li>默认值是 <code>./src/index.js</code>，然而，可以通过在 webpack 配置中配置 entry 属性，来指定一个不同的入口起点（或者也可以指定多个入口起点）。</li></ul><ul><li><a href=\"https://www.webpackjs.com/concepts/output/\" target=\"_blank\">出口 output</a>: 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，主输出文件默认为 <code>./dist/main.js</code>，其他生成文件的默认输出目录是 <code>./dist</code></li><li><a href=\"https://www.webpackjs.com/concepts/loaders/\" target=\"_blank\">loader</a>: 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</li></ul><p><br /></p><blockquote><p>注意，loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p><br /></p><ul><li><a href=\"https://www.webpackjs.com/concepts/plugins/\" target=\"_blank\">插件 plugins</a>: loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</li><li><a href=\"https://www.webpackjs.com/concepts/mode/\" target=\"_blank\">模式 mode</a>: 通过选择 <code>development</code> 或 <code>production</code> 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化</li></ul><p><br /></p><h4 id=\"9de5d825\">webpack 构建过程</h4><p><br /></p><ol start=\"1\"><li>从 Entry 里配置的 Module 开始递归解析 Entry 依赖的所有 Module。</li><li>每找到一个 Module， 就会根据配置的 Loader 去找出对应的转换规则。</li><li>对 Module 进行转换后，再解析出当前 Module 依赖的 Module。</li><li>这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 Chunk。</li><li>最后 Webpack 会把所有 Chunk 转换成文件输出。</li><li>在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</li></ol><p><br /></p><h3 id=\"9030fa6f\">开发环境和生产环境</h3><p><br /></p><p>我们在日常的前端开发工作中，一般都会有两套构建环境：一套开发时使用，一套供线上使用。</p><p><br /></p><ul><li><strong>development</strong>: 用于开发的配置文件，用于定义 <code>webpack dev server</code> 和其他东西</li><li><strong>production</strong>: 用于生产的配置文件，用于定义 <code>UglifyJSPlugin</code>，<code>sourcemaps</code> 等</li></ul><p><br /></p><p>简单来说，开发时可能需要打印 debug 信息，包含 <code>sourcemap</code> 文件，而生产环境是用于线上的即代码都是压缩后，运行时不打印 debug 信息等。譬如 axios、antd 等我们的生产环境中需要使用到那么我们应该安装该依赖在生产环境中，而 <code>webpack-dev-server</code> 则是需要安装在开发环境中</p><p><br /></p><p>平时我们 <code>npm</code> 中安装的文件中有 -S -D, -D 表示我们的依赖是安装在开发环境的，而-S 的是安装依赖在生产环境中。</p><p><br /></p><p>本文就来带你搭建基本的前端开发环境，前端开发环境需要什么呢？</p><p><br /></p><ul><li>构建发布需要的 HTML、CSS、JS、图片等资源</li><li>使用 CSS 预处理器，这里使用 less</li><li>配置 babel 转码器 =&gt; 使用 es6+</li><li>处理和压缩图片</li><li>配置热加载，HMR</li></ul><p><br /></p><p>以上配置就可以满足前端开发中需要的基本配置。下面是本文打包后的效果图：</p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/284138/1554173071637-19098e48-7817-45c2-9d36-d14e5af42a5a.png#align=left&amp;display=inline&amp;height=277&amp;originHeight=528&amp;originWidth=1420&amp;size=0&amp;status=done&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p><h3 id=\"c10e97bc\">搭建基本的开发环境</h3><p><br /></p><h3 id=\"e655a410\">安装</h3><p><br /></p><pre><code>mkdir webpack-dev &amp;&amp; cd webpack-dev\nnpm init -y\nnpm i webpack webpack-cli -D</code></pre><p><br /></p><h3 id=\"b3604875\">添加 scripts</h3><p><br /></p><p>生成了 package.json 文件，在文件中添加</p><p><br /></p><pre data-lang=\"json\"><code>&quot;scripts&quot;: {\n    &quot;build&quot;: &quot;webpack --mode production&quot;\n  }</code></pre><p><br /></p><blockquote><p>--<code>mode</code> 模式 (必选，不然会有 <code>WARNING</code>)，是 <code>webpack4</code> 新增的参数选项，默认是 <code>production</code></p></blockquote><p><br /></p><ul><li><code>--mode production</code> 生产环境</li></ul><ul data-lake-indent=\"1\"><li>提供 <code>uglifyjs-webpack-plugin</code> 代码压缩</li><li>不需要定义 <code>new webpack.DefinePlugin({ &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;production&quot;) })</code> 默认 <code>production</code></li><li>默认开启 <code>NoEmitOnErrorsPlugin -&gt; optimization.noEmitOnErrors</code>, 编译出错时跳过输出，以确保输出资源不包含错误</li><li>默认开启 <code>ModuleConcatenationPlugin</code> -&gt; <code>optimization.concatenateModules</code>, <code>webpack3</code> 添加的作用域提升(<code>Scope Hoisting</code>)</li></ul><ul><li><code>--mode development</code> 开发环境</li></ul><ul data-lake-indent=\"1\"><li>使用 eval 构建 module, 提升增量构建速度</li><li>不需要定义 <code>new webpack.DefinePlugin({ &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;development&quot;) })</code> 默认 <code>development</code></li><li>默认开启 <code>NamedModulesPlugin -&gt; optimization.namedModules</code> 使用模块热替换(HMR)时会显示模块的相对路径</li></ul><p><br /></p><p>添加了 scripts 之后，新建<code>src/index.js</code>，然后执行<code>npm run build</code> ，你就会发现新增了一个 <code>dist</code> 目录，里边存放的是 webpack 构建好的 <code>main.js</code> 文件。</p><p><br /></p><p>ps <a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\">npm scripts 使用指南</a></p><p><br /></p><h3 id=\"16b18c0c\">新建 webpack.config.js 文件</h3><p><br /></p><p>要想对 webpack 中增加更多的配置信息，我们需要建立一个 webpack 的配置文件。在根目录下创建 <code>webpack.config.js</code> 后再执行 <code>webpack</code> 命令，webpack 就会使用这个配置文件的配置了</p><p><br /></p><p>配置中具备以下的基本信息：</p><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  entry: '', // 打包入口：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始\n  output: '', // 出口\n  resolve: {}, // 配置解析：配置别名、extensions 自动解析确定的扩展等等\n  devServer: {}, // 开发服务器：run dev/start 的配置，如端口、proxy等\n  module: {}, // 模块配置：配置loader（处理非 JavaScript 文件，比如 less、sass、jsx、图片等等）等\n  plugins: [] // 插件的配置：打包优化、资源管理和注入环境变量\n}</code></pre><p><br /></p><h4 id=\"37d64eb2\">配置打包入口和出口</h4><p><br /></p><p>首先我们往 <code>webpack.config.js</code> 添加点配置信息</p><p><br /></p><pre data-lang=\"javascript\"><code>const path = require('path')\n\nmodule.exports = {\n  // 指定打包入口\n  entry: './src/index.js',\n\n  // 打包出口\n  output: {\n    path: path.resolve(__dirname, 'dist'), // 解析路径为 ./dist\n    filename: 'bundle.js'\n  }\n}</code></pre><p><br /></p><p>上面我们定义了打包入口 <code>./src/index.js</code>，打包出口为 <code>./dist</code>, 打包的文件夹名字为<code>bundle.js</code>，执行<code>npm run build</code>命令后，index.js 文件会被打包为 <code>bundle.js</code> 文件。此时随便建立一个 html 文件引用这个<code>bundle.js</code>就可以看到你在<code>index.js</code> 写的代码了。</p><p><br /></p><p><a href=\"http://nodejs.cn/api/path.html#path_path_resolve_paths\" target=\"_blank\">path.resolve([...paths])</a> 方法会把一个路径或路径片段的序列解析为一个绝对路径。</p><p><br /></p><h3 id=\"375b0d69\">使用 html-webpack-plugin 创建 html 文件</h3><p><br /></p><p>更多情况下我们不希望打包一次，就新建一次 html 文件来引用打包后的文件，这样显得不智能或者说当你打包的文件名修改后，引用路径就会出错。</p><p><br /></p><p>这个时候我们就可以使用 <a href=\"https://webpack.docschina.org/plugins/html-webpack-plugin/\" target=\"_blank\">html-webpack-plugin</a> 插件来将 HTML 引用路径和我们的构建结果关联起来。</p><p><br /></p><pre><code>npm install html-webpack-plugin -D</code></pre><p><br /></p><p>创建文件<code>public/index.html</code> 修改 <code>webpack.config.js</code> 文件</p><p><br /></p><pre data-lang=\"javascript\"><code>const HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  //...\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html', // 配置输出文件名和路径\n      template: './public/index.html' // 配置要被编译的html文件\n    })\n  ]\n}</code></pre><p><br /></p><p>重新执行 <code>npm run build</code>, dist 目录就会多个 <code>index.html</code> 并引入了 <code>bundle.js</code>.</p><p><br /></p><h4 id=\"b1ee22d8\">压缩 html 文件</h4><p><br /></p><p>修改 <code>webpack.config.js</code></p><p><br /></p><pre data-lang=\"javascript\"><code>const HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  //...\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html', // 配置输出文件名和路径\n      template: './public/index.html', // 配置要被编译的html文件\n      hash: true,\n      // 压缩 =&gt; production 模式使用\n      minify: {\n        removeAttributeQuotes: true, //删除双引号\n        collapseWhitespace: true //折叠 html 为一行\n      }\n    })\n  ]\n}</code></pre><p><br /></p><h3 id=\"c384ec3d\">打包 css 文件</h3><p><br /></p><p>我们希望使用 webpack 来进行构建 css 文件，，为此，需要在配置中引入 loader 来解析和处理 CSS 文件：</p><p><br /></p><pre><code>npm install style-loader css-loader -D</code></pre><p><br /></p><p>新建 <code>src/assets/style/color.css</code>, 修改 <code>webpack.config.js</code> 文件：</p><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  //...\n  module: {\n    /**\n     * test: 匹配特定条件。一般是提供一个正则表达式或正则表达式的数组\n     * include: 匹配特定条件。一般是提供一个字符串或者字符串数组\n     * exclude: 排除特定条件\n     * and: 必须匹配数组中的所有条件\n     * or: 匹配数组中任何一个条件,\n     * nor: 必须排除这个条件\n     */\n    rules: [\n      {\n        test: /\\.css$/,\n        include: [path.resolve(__dirname, 'src')],\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }\n  //...\n}</code></pre><p><br /></p><p>经由上述两个 loader 的处理后，CSS 代码会转变为 JS， 如果需要单独把 CSS 文件分离出来，我们需要使用 <a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\" target=\"_blank\">mini-css-extract-plugin</a> 插件</p><p><br /></p><h4 id=\"c5dabdd6\">抽取 css 到独立文件, 自动添加前缀</h4><p><br /></p><pre><code>npm i mini-css-extract-plugin postcss-loader autoprefixer -D</code></pre><p><br /></p><p>我们在写 css 时不免要考虑到浏览器兼容问题，如 <code>transform</code> 属性，需要添加浏览器前缀以适配其他浏览器。故使用到 <code>postcss-loader</code> 这个 loader， 下面则是相关的配置</p><p><br /></p><p><code>webpack.config.js</code></p><p><br /></p><pre data-lang=\"javascript\"><code>const MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        include: [path.resolve(__dirname, 'src')],\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: [require('autoprefixer')]\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    //...\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n      chunkFilename: '[id].css'\n    })\n  ]\n}</code></pre><p><br /></p><h4 id=\"3588ae19\">打包 less 文件</h4><p><br /></p><p>开发中通常会用到一门预处理语言，这里以<code>less</code>为例，通过<code>less-loader</code>可以打包 less 为 css 文件</p><p><br /></p><pre><code>npm install less less-loader -D</code></pre><p><br /></p><p>新建 <code>src/assets/style/index.less</code>, 并且在 <code>src/index.js</code> 中引入 <code>import './assets/style/index.less'</code></p><p><br /></p><p>配置 <code>webpack.config.js</code></p><p><br /></p><pre data-lang=\"javascript\"><code>const MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.less$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: [require('autoprefixer')] // 添加css中的浏览器前缀\n            }\n          },\n          'less-loader'\n        ]\n      }\n    ]\n  }\n  //...\n}</code></pre><p><br /></p><p>执打包命令后就可以发现 <code>index.less</code> 中写的样式会和<code>color.css</code>一样被打包进 <code>main.css</code>中。</p><p><br /></p><p><a href=\"https://segmentfault.com/a/1190000014396803?utm_source=tag-newest\" target=\"_blank\">webpack@v4 升级踩坑</a>: 关于使用 <code>mini-css-extract-plugin</code> 的注意点。</p><p><br /></p><h3 id=\"fc1b66fb\">打包图片</h3><p><br /></p><pre><code>npm install file-loader url-loader -D</code></pre><p><br /></p><p><strong>file-loader:</strong> 可以用于处理很多类型的文件，它的主要作用是直接输出文件，把构建后的文件路径返回。</p><p><br /></p><p><strong>url-loader:</strong></p><p>如果图片较多，会发很多 http 请求，会降低页面性能。<code>url-loader</code> 会将引入的图片编码，生成 dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片了。当然，如果图片较大，编码会消耗性能。因此 <code>url-loader</code> 提供了一个 limit 参数，小于 limit 字节的文件会被转为 DataURl，大于 limit 的还会使用 <code>file-loader</code> 进行 copy。</p><p><br /></p><ul><li>url-loader 可以看作是增强版的 file-loader。</li><li>url-loader 把图片编码成 base64 格式写进页面，从而减少服务器请求。</li></ul><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              outputPath: 'images/', //输出到images文件夹\n              limit: 500 //是把小于500B的文件打成Base64的格式，写入JS\n            }\n          }\n        ]\n      }\n    ]\n  }\n  //...\n}</code></pre><p><br /></p><p><strong>url-loader 和 file-loader 是什么关系呢？</strong></p><p><br /></p><p>简单地说，<code>url-loader</code> 封装了 <code>file-loader</code>。<code>url-loader</code> 不依赖于 <code>file-loader</code>，即使用 <code>url-loader</code> 时，只需要安装 <code>url-loader</code> 即可，不需要安装 <code>file-loader</code>，因为 <code>url-loader</code> 内置了 <code>file-loader</code>。</p><p><br /></p><p>通过上面的介绍，我们可以看到，url-loader 工作分两种情况：</p><p><br /></p><ul><li>文件大小小于 limit 参数，url-loader 将会把文件转为 DataURL；</li><li>文件大小大于 limit，url-loader 会调用 file-loader 进行处理，参数也会直接传给 file-loader。因此我们只需要安装 url-loader 即可。</li></ul><p><br /></p><p>有关 <code>url-loader</code> 和 <code>file-loader</code> 的解析：<a href=\"https://blog.csdn.net/hdchangchang/article/details/80175782\" target=\"_blank\">webpack 之图片引入-增强的 file-loader：url-loader</a></p><p><br /></p><h3 id=\"3b16a2cc\">配置 babel</h3><p><br /></p><h4 id=\"babel-loader\">babel-loader</h4><p><br /></p><p><code>Babel</code> 是一个让我们能够使用 ES 新特性的 JS 编译工具，我们可以在 webpack 中配置 Babel，以便使用 ES6、ES7 标准来编写 JS 代码。</p><p><br /></p><p>Babel 7 的相关依赖包需要加上 <code>@babel</code> scope。一个主要变化是 presets 设置由原来的 <code>env</code> 换成了 <code>@babel/preset-env</code>, 可以配置 <code>targets</code>, <code>useBuiltIns</code> 等选项用于编译出兼容目标环境的代码。其中 <code>useBuiltIns</code> 如果设为 <code>&quot;usage&quot;</code>，Babel 会根据实际代码中使用的 ES6/ES7 代码，以及与你指定的 targets，按需引入对应的 <code>polyfill</code>，而无需在代码中直接引入 <code>import '@babel/polyfill'</code>，避免输出的包过大，同时又可以放心使用各种新语法特性。</p><p><br /></p><pre><code>npm i babel-loader @babel/core @babel/preset-env -D</code></pre><p><br /></p><p>笔者这里配的版本号如下</p><p><br /></p><pre data-lang=\"json\"><code>{\n  &quot;babel-loader&quot;: &quot;^8.0.4&quot;,\n  &quot;@babel/core&quot;: &quot;^7.1.2&quot;,\n  &quot;@babel/preset-env&quot;: &quot;^7.1.0&quot;\n}</code></pre><p><br /></p><ul><li><a href=\"https://www.npmjs.com/package/babel-loader\" target=\"_blank\">babel-loader</a>: 用 babel 转换 ES6 代码需要使用到 <code>babel-loader</code></li><li><a href=\"https://www.npmjs.com/package/@babel/preset-env\" target=\"_blank\">@babel-preset-env</a>： 默认情况下是等于 ES2015 + ES2016 + ES2017，也就是说它对这三个版本的 ES 语法进行转化。</li><li><a href=\"https://www.npmjs.com/package/@babel/core\" target=\"_blank\">@babel/core</a>：babel 核心库</li></ul><p><br /></p><p>根目录下新建 <code>.babelrc</code> 文件</p><p><br /></p><pre data-lang=\"json\"><code>{\n  &quot;presets&quot;: [\n    [\n      &quot;@babel/preset-env&quot;,\n      {\n        &quot;modules&quot;: false,\n        &quot;targets&quot;: {\n          &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;= 8&quot;]\n        },\n        &quot;useBuiltIns&quot;: &quot;usage&quot;\n      }\n    ]\n  ]\n}</code></pre><p><br /></p><ul><li>presets 是一堆 plugins 的预设，起到方便的作用。</li><li>plugins 是编码转化工具，babel 会根据你配置的插件对代码进行相应的转化。</li></ul><p><br /></p><p>修改 <code>webpack.config.js</code></p><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  module: {\n    rules: [\n      //...\n      {\n        test: /\\.m?js$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n          loader: 'babel-loader'\n        }\n      }\n    ]\n  }\n}</code></pre><p><br /></p><h4 id=\"f0b8ee03\">babel/polyfill 和 transform-runtime</h4><p><br /></p><blockquote><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。</p></blockquote><p><br /></p><ul><li>babel-polyfill: 如上述所说，对于新的 API，你可能需要引入 babel-polyfill 来进行兼容</li><li>关键点</li></ul><ul data-lake-indent=\"1\"><li>babel-polyfill 是为了模拟一个完整的 ES2015+环境，旨在用于应用程序而不是库/工具。</li><li>babel-polyfill 会污染全局作用域</li></ul><p><br /></p><p>babel-runtime 的作用：</p><p><br /></p><ul><li><strong>提取辅助函数</strong>。ES6 转码时，babel 会需要一些辅助函数，例如 _extend。babel 默认会将这些辅助函数内联到每一个 js 文件里， babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 babel-runtime 中，这样做能减小项目文件的大小。</li><li><strong>提供 polyfill</strong>：不会污染全局作用域，但是不支持实例方法如 Array.includes</li></ul><p><br /></p><p><code>babel-runtime</code> 更像是分散的 polyfill 模块，需要在各自的模块里单独引入，借助 <code>transform-runtime</code> 插件来自动化处理这一切，也就是说你不要在文件开头 import 相关的 <code>polyfill</code>，你只需使用，<code>transform-runtime</code> 会帮你引入。</p><p><br /></p><p>对于开发应用来说，直接使用上述的按需 <code>polyfill</code> 方案是比较方便的，但如果是开发工具、库的话，这种方案未必适合（<code>babel-polyfill</code> 是通过向全局对象和内置对象的 <code>prototype</code> 上添加方法实现的，会造成全局变量污染）。Babel 提供了另外一种方案 <code>transform-runtime</code>，它在编译过程中只是将需要 <code>polyfill</code> 的代码引入了一个指向 <code>core-js</code> 中对应模块的链接(alias)。关于这两个方案的具体差异和选择，可以自行搜索相关教程，这里不再展开，下面提供一个 <code>transform-runtime</code> 的参考配置方案。</p><p><br /></p><ul><li>首先安装 runtime 相关依赖</li></ul><p><br /></p><pre><code>npm i @babel/plugin-transform-runtime -D\nnpm i @babel/runtime -S</code></pre><p><br /></p><p>修改 <code>.babelrc</code></p><p><br /></p><pre data-lang=\"json\"><code>{\n  //...\n  &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;]\n}</code></pre><p><br /></p><h3 id=\"de6d1476\">打包前清理源目录文件 clean-webpack-plugin</h3><p><br /></p><p>每次打包，都会生成项目的静态资源，随着某些文件的增删，我们的 dist 目录下可能产生一些不再使用的静态资源，webpack 并不会自动判断哪些是需要的资源，为了不让这些旧文件也部署到生产环境上占用空间，所以在 webpack 打包前最好能清理 dist 目录。</p><p><br /></p><pre><code>npm install clean-webpack-plugin -D</code></pre><p><br /></p><p>修改 <code>webpack.config.js</code> 文件</p><p><br /></p><pre data-lang=\"javascript\"><code>const CleanWebpackPlugin = require('clean-webpack-plugin')\nmodule.exports = {\n  plugins: [new CleanWebpackPlugin(['dist'])]\n}</code></pre><p><br /></p><h3 id=\"b8f9cc52\">提取公用代码</h3><p><br /></p><p>假如你 <code>a.js</code> 和 <code>b.js</code> 都 import 了 <code>c.js</code> 文件，这段代码就冗杂了。为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。</p><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          // 抽离自己写的公共代码\n          chunks: 'initial',\n          name: 'common', // 打包后的文件名，任意命名\n          minChunks: 2, //最小引用2次\n          minSize: 0 // 只要超出0字节就生成一个新包\n        },\n        styles: {\n          name: 'styles', // 抽离公用样式\n          test: /\\.css$/,\n          chunks: 'all',\n          minChunks: 2,\n          enforce: true\n        },\n        vendor: {\n          // 抽离第三方插件\n          test: /node_modules/, // 指定是node_modules下的第三方包\n          chunks: 'initial',\n          name: 'vendor', // 打包后的文件名，任意命名\n          // 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包\n          priority: 10\n        }\n      }\n    }\n  }\n}</code></pre><p><br /></p><h3 id=\"hash\">hash</h3><p><br /></p><p>hash 是干嘛用的？</p><p>我们每次打包出来的结果可能都是同一个文件，那我上线的时候是不是要替换掉上线的 js，那我怎么知道哪是最新的呢，我们一般会清一下缓存。而 hash 就是为了解决这个问题而存在的</p><p><br /></p><p>我们此时在改一些 webpack.config.js 的配置</p><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  //...\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[hash:8].js'\n  },\n  //...\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].[hash:8].css',\n      chunkFilename: '[id].[hash:8].css'\n    })\n  ]\n}</code></pre><p><br /></p><h3 id=\"d541b9ea\">减少 resolve 的解析，配置别名</h3><p><br /></p><p>如果我们可以精简 <code>resolve</code> 配置，让 <code>webpack</code> 在查询模块路径时尽可能快速地定位到需要的模块，不做额外的查询工作，那么 <code>webpack</code> 的构建速度也会快一些</p><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  resolve: {\n    /**\n     * alias: 别名的配置\n     *\n     * extensions: 自动解析确定的扩展,\n     *    比如 import 'xxx/theme.css' 可以在extensions 中添加 '.css'， 引入方式则为 import 'xxx/theme'\n     *    @default ['.wasm', '.mjs', '.js', '.json']\n     *\n     * modules 告诉 webpack 解析模块时应该搜索的目录\n     *   如果你想要添加一个目录到模块搜索目录，此目录优先于 node_modules/ 搜索\n     *   这样配置在某种程度上可以简化模块的查找，提升构建速度 @default node_modules 优先\n     */\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n      tool$: path.resolve(__dirname, 'src/utils/tool.js') // 给定对象的键后的末尾添加 $，以表示精准匹配\n    },\n    extensions: ['.wasm', '.mjs', '.js', '.json', '.jsx'],\n    modules: [path.resolve(__dirname, 'src'), 'node_modules']\n  }\n}</code></pre><p><br /></p><h3 id=\"webpack-dev-serve\">webpack-dev-serve</h3><p><br /></p><p>上面讲到了都是如何打包文件，但是开发中我们需要一个本地服务，这时我们可以使用 <code>webpack-dev-server</code> 在本地开启一个简单的静态服务来进行开发。</p><p><br /></p><p><code>webpack-dev-server</code> 是 webpack 官方提供的一个工具，可以基于当前的 webpack 构建配置快速启动一个静态服务。当 <code>mode</code> 为 <code>development</code> 时，会具备 <code>hot reload</code> 的功能，即当源码文件变化时，会即时更新当前页面，以便你看到最新的效果。...</p><p><br /></p><pre><code>npm install webpack-dev-server -D</code></pre><p><br /></p><p>package.json 中 scripts 中添加</p><p><br /></p><pre><code>&quot;start&quot;: &quot;webpack-dev-server --mode development&quot;</code></pre><p><br /></p><p>默认开启一个本地服务的窗口 <a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080/</a> 便于开发</p><p><br /></p><h4 id=\"31c0be61\">配置开发服务器</h4><p><br /></p><p>我们可以对 <code>webpack-dev-server</code> 做针对性的配置</p><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  // 配置开发服务器\n  devServer: {\n    port: 1234,\n    open: true, // 自动打开浏览器\n    compress: true // 服务器压缩\n    //... proxy、hot\n  }\n}</code></pre><p><br /></p><ul><li>contentBase: 服务器访问的根目录（可用于访问静态资源）</li><li>port: 端口</li><li>open: 自动打开浏览器</li></ul><p><br /></p><h3 id=\"53985000\">模块热替换(hot module replacement)</h3><p><br /></p><p>模块热替换(<code>HMR - Hot Module Replacement</code>)功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p><p><br /></p><ul><li>保留在完全重新加载页面时丢失的应用程序状态。</li><li>只更新变更内容，以节省宝贵的开发时间。</li><li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li></ul><p><br /></p><p>上面我们 <code>npm start</code> 后修改一次文件，页面就会刷新一次。这样就存在很大问题了，比如我们使用 <code>redux</code>, <code>vuex</code> 等插件，页面一刷新那么存放在 <code>redux</code>, <code>vuex</code> 中的东西就会丢失，非常不利于我们的开发。</p><p><br /></p><p>HMR 配合 webpack-dev-server ，首先我们配置下 webpack.config.js</p><p><br /></p><pre data-lang=\"javascript\"><code>const webpack = require('webpack')\n\nmodule.exports = {\n  devServer: {\n    //...\n    hot: true\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n    //...\n  ]\n}</code></pre><p><br /></p><p>配置后还不行，因为 webpack 还不知道你要更新哪里, 修改 <code>src/index.js</code> 文件, 添加</p><p><br /></p><pre data-lang=\"javascript\"><code>if (module.hot) {\n  module.hot.accept()\n}</code></pre><p><br /></p><p>重启服务，<code>npm start</code> 之后，修改引入 <code>index.js</code> 文件后，页面就不会重新刷新了，这便实现了 HMR</p><p><br /></p><p>但是但是有个问题是，你修改 css/less 等样式文件并未发生改变， what ?</p><p><br /></p><p>HMR 修改样式表 需要借助于 <code>style-loader</code>， 而我们之前用的是 <code>MiniCssExtractPlugin.loader</code>， 这也好办，修改其中一个 rules 就可以了，我们可以试试改</p><p><br /></p><pre data-lang=\"javascript\"><code>module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          // MiniCssExtractPlugin.loader,\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: [require('autoprefixer')] // 添加css中的浏览器前缀\n            }\n          },\n          'less-loader'\n        ]\n      }\n    ]\n  }\n}</code></pre><p><br /></p><p>这样我们修改 less 文件就会发现 HMR 已经实现了。</p><p><br /></p><p>其实，我们可以发现，dev 下配置的 loader 为 <code>style-loader</code> , 而生产环境下则是需要 <code>MiniCssExtractPlugin.loader</code></p><p><br /></p><p>这就涉及到了不同环境之间的配置。可以通过 <code>process.env.NODE_ENV</code> 获取当前是开发环境或者是生产环境，然后配置不同的 loader，这里就不做展开了。下一篇文章打算在做一个 <code>react-cli</code> 或者 <code>vue-cli</code> 的配置，将开发环境的配置与生产环境的配置分开为不同的文件。</p><p><br /></p><h3 id=\"433531fd\">结语</h3><p><br /></p><p>前面讲到的知识都是 webpack 的一些基础的知识，更多的资料可以查询<a href=\"https://webpack.js.org/\" target=\"_blank\">webpack 中文官网</a>，官网讲的比较详细，我这里也是讲最常的配置，也是一篇入门系列的文章，文中涉及的知识点还有很多地方还需要完善，譬如 优化 webpack 的构建速度， 减小打包的体积等等。</p><p><br /></p><p>学习 <code>webpack 4.0</code> 还需要多实践，多瞎搞，笔者也是刚刚学习 webpack 的配置，不对之处请各位指出。</p><p><br /></p><p>下一篇文章打算从零配置一个脚手架，以加深自己对 webpack 的理解。</p><p><br /></p><p>本文产生的代码：<a href=\"https://github.com/gershonv/my-code-store/tree/master/webpack/webpack-dev\" target=\"_blank\">webpack-dev</a></p><p><br /></p><h3 id=\"d17a0f0b\">参考</h3><p><br /></p><ul><li><a href=\"https://juejin.im/post/5b2b9a00e51d45587b48075e#heading-0\" target=\"_blank\">webpack4.x 入门一篇足矣</a></li><li><a href=\"https://segmentfault.com/a/1190000014466696?utm_source=index-hottest/*&amp;%5E%25$#articleHeader0\" target=\"_blank\">Webpack4 不深不浅的实践教程</a></li><li><a href=\"https://juejin.im/post/5b3834e051882574ce2f3dd9\" target=\"_blank\">webpack 之 babel 配置和 HMR</a></li><li><a href=\"https://segmentfault.com/a/1190000015247255\" target=\"_blank\">使用 webpack 4 和 Babel 7 配置 Vue.js 工程模板</a></li><li><a href=\"https://juejin.im/post/5b3daf2ee51d451962727fbe\" target=\"_blank\">webpack 4 ：从 0 配置到项目搭建</a></li><li><a href=\"https://juejin.im/post/5aa3d2056fb9a028c36868aa\" target=\"_blank\">webpack 详解</a></li><li><a href=\"https://juejin.im/post/5b4609f5e51d4519596b66a7\" target=\"_blank\">手写一个 webpack4.0 配置</a></li><li><a href=\"https://juejin.im/entry/5b552985f265da0f697036b2\" target=\"_blank\">Webpack 4 教程：从零配置到生产发布（2018）</a></li><li><a href=\"https://juejin.im/post/5badd0c5e51d450e4437f07a\" target=\"_blank\">Webpack 揭秘——走向高阶前端的必经之路</a></li><li><a href=\"https://www.bilibili.com/video/av25439651?from=search&amp;seid=14183256954711376795\" target=\"_blank\">珠峰架构师培训公开课 webpack4.0 进阶</a></li><li><a href=\"https://webpack.js.org/\" target=\"_blank\">webpack 官网</a></li></ul><p><br /></p>",
  "body_lake": "<!doctype lake><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F284138%2F1554173071570-3d99c43c-f0b9-4f16-ade0-de832a7fba5f.png%22%2C%22originWidth%22%3A1071%2C%22originHeight%22%3A604%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A746%2C%22height%22%3A421%7D\"></card></p><p><br /></p><h3 id=\"4e20f1f8\">什么是 webpack</h3><p><br /></p><p>webpack 可以看做是模块打包机：他做的事情是，分析你的项目结构，找到 <code>JavaScript</code> 模块以及其他的一些浏览器不能直接运行的扩展语言（<code>Scss</code>、<code>TypeScript</code> 等），将其打包为合适的格式以供浏览器使用</p><p><br /></p><p>构建就是把源代码转换成发布到线上可执行的 <code>JavaScript</code>、CSS、HTML 代码，包括以下内容：</p><p><br /></p><ul><li><strong>代码转换</strong>：<code>TypeScript</code> 编译成 <code>JavaScript</code>、<code>SCSS</code> 编译成 CSS 等等</li><li><strong>文件优化</strong>：压缩 <code>JavaScript</code>、CSS、HTML 代码，压缩合并图片等</li><li><strong>代码分割</strong>：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载</li><li><strong>模块合并</strong>：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件</li><li><strong>自动刷新</strong>：监听本地源代码的变化，自动构建，刷新浏览器</li><li><strong>代码校验</strong>：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过</li><li><strong>自动发布</strong>：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><p><br /></p><p>构建其实是工程化、自动化思想在前端开发中的体现。把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。</p><h4 id=\"6f286eea\">webpack 的基本概念</h4><p><br /></p><ul><li><a href=\"https://www.webpackjs.com/concepts/entry-points/\" target=\"_blank\">入口(entry point)</a>: 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始，webpack 会找出有哪些模块和 library 是入口起点（直接和间接）依赖的。</li></ul><ul data-lake-indent=\"1\"><li>默认值是 <code>./src/index.js</code>，然而，可以通过在 webpack 配置中配置 entry 属性，来指定一个不同的入口起点（或者也可以指定多个入口起点）。</li></ul><ul><li><a href=\"https://www.webpackjs.com/concepts/output/\" target=\"_blank\">出口 output</a>: 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，主输出文件默认为 <code>./dist/main.js</code>，其他生成文件的默认输出目录是 <code>./dist</code></li><li><a href=\"https://www.webpackjs.com/concepts/loaders/\" target=\"_blank\">loader</a>: 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</li></ul><p><br /></p><blockquote><p>注意，loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p><br /></p><ul><li><a href=\"https://www.webpackjs.com/concepts/plugins/\" target=\"_blank\">插件 plugins</a>: loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</li><li><a href=\"https://www.webpackjs.com/concepts/mode/\" target=\"_blank\">模式 mode</a>: 通过选择 <code>development</code> 或 <code>production</code> 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化</li></ul><p><br /></p><h4 id=\"9de5d825\">webpack 构建过程</h4><p><br /></p><ol start=\"1\"><li>从 Entry 里配置的 Module 开始递归解析 Entry 依赖的所有 Module。</li><li>每找到一个 Module， 就会根据配置的 Loader 去找出对应的转换规则。</li><li>对 Module 进行转换后，再解析出当前 Module 依赖的 Module。</li><li>这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 Chunk。</li><li>最后 Webpack 会把所有 Chunk 转换成文件输出。</li><li>在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</li></ol><p><br /></p><h3 id=\"9030fa6f\">开发环境和生产环境</h3><p><br /></p><p>我们在日常的前端开发工作中，一般都会有两套构建环境：一套开发时使用，一套供线上使用。</p><p><br /></p><ul><li><strong>development</strong>: 用于开发的配置文件，用于定义 <code>webpack dev server</code> 和其他东西</li><li><strong>production</strong>: 用于生产的配置文件，用于定义 <code>UglifyJSPlugin</code>，<code>sourcemaps</code> 等</li></ul><p><br /></p><p>简单来说，开发时可能需要打印 debug 信息，包含 <code>sourcemap</code> 文件，而生产环境是用于线上的即代码都是压缩后，运行时不打印 debug 信息等。譬如 axios、antd 等我们的生产环境中需要使用到那么我们应该安装该依赖在生产环境中，而 <code>webpack-dev-server</code> 则是需要安装在开发环境中</p><p><br /></p><p>平时我们 <code>npm</code> 中安装的文件中有 -S -D, -D 表示我们的依赖是安装在开发环境的，而-S 的是安装依赖在生产环境中。</p><p><br /></p><p>本文就来带你搭建基本的前端开发环境，前端开发环境需要什么呢？</p><p><br /></p><ul><li>构建发布需要的 HTML、CSS、JS、图片等资源</li><li>使用 CSS 预处理器，这里使用 less</li><li>配置 babel 转码器 =&gt; 使用 es6+</li><li>处理和压缩图片</li><li>配置热加载，HMR</li></ul><p><br /></p><p>以上配置就可以满足前端开发中需要的基本配置。下面是本文打包后的效果图：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F284138%2F1554173071637-19098e48-7817-45c2-9d36-d14e5af42a5a.png%22%2C%22originWidth%22%3A1420%2C%22originHeight%22%3A528%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A746%2C%22height%22%3A277%7D\"></card><cursor /></p><p><br /></p><h3 id=\"c10e97bc\">搭建基本的开发环境</h3><p><br /></p><h3 id=\"e655a410\">安装</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2273aa9bfe%22%2C%22code%22%3A%22mkdir%20webpack-dev%20%26%26%20cd%20webpack-dev%5Cnnpm%20init%20-y%5Cnnpm%20i%20webpack%20webpack-cli%20-D%22%7D\"></card><p><br /></p><h3 id=\"b3604875\">添加 scripts</h3><p><br /></p><p>生成了 package.json 文件，在文件中添加</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228c9035fc%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%5C%22scripts%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22build%5C%22%3A%20%5C%22webpack%20--mode%20production%5C%22%5Cn%20%20%7D%22%7D\"></card><p><br /></p><blockquote><p>--<code>mode</code> 模式 (必选，不然会有 <code>WARNING</code>)，是 <code>webpack4</code> 新增的参数选项，默认是 <code>production</code></p></blockquote><p><br /></p><ul><li><code>--mode production</code> 生产环境</li></ul><ul data-lake-indent=\"1\"><li>提供 <code>uglifyjs-webpack-plugin</code> 代码压缩</li><li>不需要定义 <code>new webpack.DefinePlugin({ &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;production&quot;) })</code> 默认 <code>production</code></li><li>默认开启 <code>NoEmitOnErrorsPlugin -&gt; optimization.noEmitOnErrors</code>, 编译出错时跳过输出，以确保输出资源不包含错误</li><li>默认开启 <code>ModuleConcatenationPlugin</code> -&gt; <code>optimization.concatenateModules</code>, <code>webpack3</code> 添加的作用域提升(<code>Scope Hoisting</code>)</li></ul><ul><li><code>--mode development</code> 开发环境</li></ul><ul data-lake-indent=\"1\"><li>使用 eval 构建 module, 提升增量构建速度</li><li>不需要定义 <code>new webpack.DefinePlugin({ &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;development&quot;) })</code> 默认 <code>development</code></li><li>默认开启 <code>NamedModulesPlugin -&gt; optimization.namedModules</code> 使用模块热替换(HMR)时会显示模块的相对路径</li></ul><p><br /></p><p>添加了 scripts 之后，新建<code>src/index.js</code>，然后执行<code>npm run build</code> ，你就会发现新增了一个 <code>dist</code> 目录，里边存放的是 webpack 构建好的 <code>main.js</code> 文件。</p><p><br /></p><p>ps <a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\">npm scripts 使用指南</a></p><p><br /></p><h3 id=\"16b18c0c\">新建 webpack.config.js 文件</h3><p><br /></p><p>要想对 webpack 中增加更多的配置信息，我们需要建立一个 webpack 的配置文件。在根目录下创建 <code>webpack.config.js</code> 后再执行 <code>webpack</code> 命令，webpack 就会使用这个配置文件的配置了</p><p><br /></p><p>配置中具备以下的基本信息：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22274553cf%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20entry%3A%20''%2C%20%2F%2F%20%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%EF%BC%9A%E6%8C%87%E7%A4%BA%20webpack%20%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E6%A8%A1%E5%9D%97%EF%BC%8C%E6%9D%A5%E4%BD%9C%E4%B8%BA%E6%9E%84%E5%BB%BA%E5%85%B6%E5%86%85%E9%83%A8%E4%BE%9D%E8%B5%96%E5%9B%BE%E7%9A%84%E5%BC%80%E5%A7%8B%5Cn%20%20output%3A%20''%2C%20%2F%2F%20%E5%87%BA%E5%8F%A3%5Cn%20%20resolve%3A%20%7B%7D%2C%20%2F%2F%20%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%88%AB%E5%90%8D%E3%80%81extensions%20%E8%87%AA%E5%8A%A8%E8%A7%A3%E6%9E%90%E7%A1%AE%E5%AE%9A%E7%9A%84%E6%89%A9%E5%B1%95%E7%AD%89%E7%AD%89%5Cn%20%20devServer%3A%20%7B%7D%2C%20%2F%2F%20%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9Arun%20dev%2Fstart%20%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%A6%82%E7%AB%AF%E5%8F%A3%E3%80%81proxy%E7%AD%89%5Cn%20%20module%3A%20%7B%7D%2C%20%2F%2F%20%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE%EF%BC%9A%E9%85%8D%E7%BD%AEloader%EF%BC%88%E5%A4%84%E7%90%86%E9%9D%9E%20JavaScript%20%E6%96%87%E4%BB%B6%EF%BC%8C%E6%AF%94%E5%A6%82%20less%E3%80%81sass%E3%80%81jsx%E3%80%81%E5%9B%BE%E7%89%87%E7%AD%89%E7%AD%89%EF%BC%89%E7%AD%89%5Cn%20%20plugins%3A%20%5B%5D%20%2F%2F%20%E6%8F%92%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%9A%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96%E3%80%81%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%92%8C%E6%B3%A8%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%5Cn%7D%22%7D\"></card><p><br /></p><h4 id=\"37d64eb2\">配置打包入口和出口</h4><p><br /></p><p>首先我们往 <code>webpack.config.js</code> 添加点配置信息</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22959be494%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20path%20%3D%20require('path')%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E6%89%93%E5%8C%85%E5%85%A5%E5%8F%A3%5Cn%20%20entry%3A%20'.%2Fsrc%2Findex.js'%2C%5Cn%5Cn%20%20%2F%2F%20%E6%89%93%E5%8C%85%E5%87%BA%E5%8F%A3%5Cn%20%20output%3A%20%7B%5Cn%20%20%20%20path%3A%20path.resolve(__dirname%2C%20'dist')%2C%20%2F%2F%20%E8%A7%A3%E6%9E%90%E8%B7%AF%E5%BE%84%E4%B8%BA%20.%2Fdist%5Cn%20%20%20%20filename%3A%20'bundle.js'%5Cn%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>上面我们定义了打包入口 <code>./src/index.js</code>，打包出口为 <code>./dist</code>, 打包的文件夹名字为<code>bundle.js</code>，执行<code>npm run build</code>命令后，index.js 文件会被打包为 <code>bundle.js</code> 文件。此时随便建立一个 html 文件引用这个<code>bundle.js</code>就可以看到你在<code>index.js</code> 写的代码了。</p><p><br /></p><p><a href=\"http://nodejs.cn/api/path.html#path_path_resolve_paths\" target=\"_blank\">path.resolve([...paths])</a> 方法会把一个路径或路径片段的序列解析为一个绝对路径。</p><p><br /></p><h3 id=\"375b0d69\">使用 html-webpack-plugin 创建 html 文件</h3><p><br /></p><p>更多情况下我们不希望打包一次，就新建一次 html 文件来引用打包后的文件，这样显得不智能或者说当你打包的文件名修改后，引用路径就会出错。</p><p><br /></p><p>这个时候我们就可以使用 <a href=\"https://webpack.docschina.org/plugins/html-webpack-plugin/\" target=\"_blank\">html-webpack-plugin</a> 插件来将 HTML 引用路径和我们的构建结果关联起来。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%226d5a257a%22%2C%22code%22%3A%22npm%20install%20html-webpack-plugin%20-D%22%7D\"></card><p><br /></p><p>创建文件<code>public/index.html</code> 修改 <code>webpack.config.js</code> 文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228f273b89%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20HtmlWebpackPlugin%20%3D%20require('html-webpack-plugin')%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%2F%2F...%5Cn%20%20plugins%3A%20%5B%5Cn%20%20%20%20new%20HtmlWebpackPlugin(%7B%5Cn%20%20%20%20%20%20filename%3A%20'index.html'%2C%20%2F%2F%20%E9%85%8D%E7%BD%AE%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20template%3A%20'.%2Fpublic%2Findex.html'%20%2F%2F%20%E9%85%8D%E7%BD%AE%E8%A6%81%E8%A2%AB%E7%BC%96%E8%AF%91%E7%9A%84html%E6%96%87%E4%BB%B6%5Cn%20%20%20%20%7D)%5Cn%20%20%5D%5Cn%7D%22%7D\"></card><p><br /></p><p>重新执行 <code>npm run build</code>, dist 目录就会多个 <code>index.html</code> 并引入了 <code>bundle.js</code>.</p><p><br /></p><h4 id=\"b1ee22d8\">压缩 html 文件</h4><p><br /></p><p>修改 <code>webpack.config.js</code></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f3155649%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20HtmlWebpackPlugin%20%3D%20require('html-webpack-plugin')%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%2F%2F...%5Cn%20%20plugins%3A%20%5B%5Cn%20%20%20%20new%20HtmlWebpackPlugin(%7B%5Cn%20%20%20%20%20%20filename%3A%20'index.html'%2C%20%2F%2F%20%E9%85%8D%E7%BD%AE%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20template%3A%20'.%2Fpublic%2Findex.html'%2C%20%2F%2F%20%E9%85%8D%E7%BD%AE%E8%A6%81%E8%A2%AB%E7%BC%96%E8%AF%91%E7%9A%84html%E6%96%87%E4%BB%B6%5Cn%20%20%20%20%20%20hash%3A%20true%2C%5Cn%20%20%20%20%20%20%2F%2F%20%E5%8E%8B%E7%BC%A9%20%3D%3E%20production%20%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8%5Cn%20%20%20%20%20%20minify%3A%20%7B%5Cn%20%20%20%20%20%20%20%20removeAttributeQuotes%3A%20true%2C%20%2F%2F%E5%88%A0%E9%99%A4%E5%8F%8C%E5%BC%95%E5%8F%B7%5Cn%20%20%20%20%20%20%20%20collapseWhitespace%3A%20true%20%2F%2F%E6%8A%98%E5%8F%A0%20html%20%E4%B8%BA%E4%B8%80%E8%A1%8C%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%20%20%5D%5Cn%7D%22%7D\"></card><p><br /></p><h3 id=\"c384ec3d\">打包 css 文件</h3><p><br /></p><p>我们希望使用 webpack 来进行构建 css 文件，，为此，需要在配置中引入 loader 来解析和处理 CSS 文件：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b01317e4%22%2C%22code%22%3A%22npm%20install%20style-loader%20css-loader%20-D%22%7D\"></card><p><br /></p><p>新建 <code>src/assets/style/color.css</code>, 修改 <code>webpack.config.js</code> 文件：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2231ad25c5%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20%2F%2F...%5Cn%20%20module%3A%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20test%3A%20%E5%8C%B9%E9%85%8D%E7%89%B9%E5%AE%9A%E6%9D%A1%E4%BB%B6%E3%80%82%E4%B8%80%E8%88%AC%E6%98%AF%E6%8F%90%E4%BE%9B%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%88%96%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20*%20include%3A%20%E5%8C%B9%E9%85%8D%E7%89%B9%E5%AE%9A%E6%9D%A1%E4%BB%B6%E3%80%82%E4%B8%80%E8%88%AC%E6%98%AF%E6%8F%90%E4%BE%9B%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%96%E8%80%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20*%20exclude%3A%20%E6%8E%92%E9%99%A4%E7%89%B9%E5%AE%9A%E6%9D%A1%E4%BB%B6%5Cn%20%20%20%20%20*%20and%3A%20%E5%BF%85%E9%A1%BB%E5%8C%B9%E9%85%8D%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%A1%E4%BB%B6%5Cn%20%20%20%20%20*%20or%3A%20%E5%8C%B9%E9%85%8D%E6%95%B0%E7%BB%84%E4%B8%AD%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E6%9D%A1%E4%BB%B6%2C%5Cn%20%20%20%20%20*%20nor%3A%20%E5%BF%85%E9%A1%BB%E6%8E%92%E9%99%A4%E8%BF%99%E4%B8%AA%E6%9D%A1%E4%BB%B6%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20rules%3A%20%5B%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20test%3A%20%2F%5C%5C.css%24%2F%2C%5Cn%20%20%20%20%20%20%20%20include%3A%20%5Bpath.resolve(__dirname%2C%20'src')%5D%2C%5Cn%20%20%20%20%20%20%20%20use%3A%20%5B'style-loader'%2C%20'css-loader'%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%7D%5Cn%20%20%2F%2F...%5Cn%7D%22%7D\"></card><p><br /></p><p>经由上述两个 loader 的处理后，CSS 代码会转变为 JS， 如果需要单独把 CSS 文件分离出来，我们需要使用 <a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\" target=\"_blank\">mini-css-extract-plugin</a> 插件</p><p><br /></p><h4 id=\"c5dabdd6\">抽取 css 到独立文件, 自动添加前缀</h4><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b1fbf37a%22%2C%22code%22%3A%22npm%20i%20mini-css-extract-plugin%20postcss-loader%20autoprefixer%20-D%22%7D\"></card><p><br /></p><p>我们在写 css 时不免要考虑到浏览器兼容问题，如 <code>transform</code> 属性，需要添加浏览器前缀以适配其他浏览器。故使用到 <code>postcss-loader</code> 这个 loader， 下面则是相关的配置</p><p><br /></p><p><code>webpack.config.js</code></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2241be201f%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20MiniCssExtractPlugin%20%3D%20require('mini-css-extract-plugin')%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%2F%2F%20...%5Cn%20%20module%3A%20%7B%5Cn%20%20%20%20rules%3A%20%5B%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20test%3A%20%2F%5C%5C.css%24%2F%2C%5Cn%20%20%20%20%20%20%20%20include%3A%20%5Bpath.resolve(__dirname%2C%20'src')%5D%2C%5Cn%20%20%20%20%20%20%20%20use%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%20%20MiniCssExtractPlugin.loader%2C%5Cn%20%20%20%20%20%20%20%20%20%20'css-loader'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20loader%3A%20'postcss-loader'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20plugins%3A%20%5Brequire('autoprefixer')%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%7D%2C%5Cn%20%20plugins%3A%20%5B%5Cn%20%20%20%20%2F%2F...%5Cn%20%20%20%20new%20MiniCssExtractPlugin(%7B%5Cn%20%20%20%20%20%20filename%3A%20'%5Bname%5D.css'%2C%5Cn%20%20%20%20%20%20chunkFilename%3A%20'%5Bid%5D.css'%5Cn%20%20%20%20%7D)%5Cn%20%20%5D%5Cn%7D%22%7D\"></card><p><br /></p><h4 id=\"3588ae19\">打包 less 文件</h4><p><br /></p><p>开发中通常会用到一门预处理语言，这里以<code>less</code>为例，通过<code>less-loader</code>可以打包 less 为 css 文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22652280d1%22%2C%22code%22%3A%22npm%20install%20less%20less-loader%20-D%22%7D\"></card><p><br /></p><p>新建 <code>src/assets/style/index.less</code>, 并且在 <code>src/index.js</code> 中引入 <code>import './assets/style/index.less'</code></p><p><br /></p><p>配置 <code>webpack.config.js</code></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2281aac712%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20MiniCssExtractPlugin%20%3D%20require('mini-css-extract-plugin')%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20module%3A%20%7B%5Cn%20%20%20%20rules%3A%20%5B%5Cn%20%20%20%20%20%20%2F%2F%20...%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20test%3A%20%2F%5C%5C.less%24%2F%2C%5Cn%20%20%20%20%20%20%20%20use%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%20%20MiniCssExtractPlugin.loader%2C%5Cn%20%20%20%20%20%20%20%20%20%20'css-loader'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20loader%3A%20'postcss-loader'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20plugins%3A%20%5Brequire('autoprefixer')%5D%20%2F%2F%20%E6%B7%BB%E5%8A%A0css%E4%B8%AD%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%89%8D%E7%BC%80%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20'less-loader'%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%7D%5Cn%20%20%2F%2F...%5Cn%7D%22%7D\"></card><p><br /></p><p>执打包命令后就可以发现 <code>index.less</code> 中写的样式会和<code>color.css</code>一样被打包进 <code>main.css</code>中。</p><p><br /></p><p><a href=\"https://segmentfault.com/a/1190000014396803?utm_source=tag-newest\" target=\"_blank\">webpack@v4 升级踩坑</a>: 关于使用 <code>mini-css-extract-plugin</code> 的注意点。</p><p><br /></p><h3 id=\"fc1b66fb\">打包图片</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d686dbf6%22%2C%22code%22%3A%22npm%20install%20file-loader%20url-loader%20-D%22%7D\"></card><p><br /></p><p><strong>file-loader:</strong> 可以用于处理很多类型的文件，它的主要作用是直接输出文件，把构建后的文件路径返回。</p><p><br /></p><p><strong>url-loader:</strong></p><p>如果图片较多，会发很多 http 请求，会降低页面性能。<code>url-loader</code> 会将引入的图片编码，生成 dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片了。当然，如果图片较大，编码会消耗性能。因此 <code>url-loader</code> 提供了一个 limit 参数，小于 limit 字节的文件会被转为 DataURl，大于 limit 的还会使用 <code>file-loader</code> 进行 copy。</p><p><br /></p><ul><li>url-loader 可以看作是增强版的 file-loader。</li><li>url-loader 把图片编码成 base64 格式写进页面，从而减少服务器请求。</li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2275ee4b46%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20module%3A%20%7B%5Cn%20%20%20%20rules%3A%20%5B%5Cn%20%20%20%20%20%20%2F%2F%20...%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20test%3A%20%2F%5C%5C.(png%7Cjpg%7Cgif)%24%2F%2C%5Cn%20%20%20%20%20%20%20%20use%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20loader%3A%20'url-loader'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20outputPath%3A%20'images%2F'%2C%20%2F%2F%E8%BE%93%E5%87%BA%E5%88%B0images%E6%96%87%E4%BB%B6%E5%A4%B9%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20limit%3A%20500%20%2F%2F%E6%98%AF%E6%8A%8A%E5%B0%8F%E4%BA%8E500B%E7%9A%84%E6%96%87%E4%BB%B6%E6%89%93%E6%88%90Base64%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%8C%E5%86%99%E5%85%A5JS%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%7D%5Cn%20%20%2F%2F...%5Cn%7D%22%7D\"></card><p><br /></p><p><strong>url-loader 和 file-loader 是什么关系呢？</strong></p><p><br /></p><p>简单地说，<code>url-loader</code> 封装了 <code>file-loader</code>。<code>url-loader</code> 不依赖于 <code>file-loader</code>，即使用 <code>url-loader</code> 时，只需要安装 <code>url-loader</code> 即可，不需要安装 <code>file-loader</code>，因为 <code>url-loader</code> 内置了 <code>file-loader</code>。</p><p><br /></p><p>通过上面的介绍，我们可以看到，url-loader 工作分两种情况：</p><p><br /></p><ul><li>文件大小小于 limit 参数，url-loader 将会把文件转为 DataURL；</li><li>文件大小大于 limit，url-loader 会调用 file-loader 进行处理，参数也会直接传给 file-loader。因此我们只需要安装 url-loader 即可。</li></ul><p><br /></p><p>有关 <code>url-loader</code> 和 <code>file-loader</code> 的解析：<a href=\"https://blog.csdn.net/hdchangchang/article/details/80175782\" target=\"_blank\">webpack 之图片引入-增强的 file-loader：url-loader</a></p><p><br /></p><h3 id=\"3b16a2cc\">配置 babel</h3><p><br /></p><h4 id=\"babel-loader\">babel-loader</h4><p><br /></p><p><code>Babel</code> 是一个让我们能够使用 ES 新特性的 JS 编译工具，我们可以在 webpack 中配置 Babel，以便使用 ES6、ES7 标准来编写 JS 代码。</p><p><br /></p><p>Babel 7 的相关依赖包需要加上 <code>@babel</code> scope。一个主要变化是 presets 设置由原来的 <code>env</code> 换成了 <code>@babel/preset-env</code>, 可以配置 <code>targets</code>, <code>useBuiltIns</code> 等选项用于编译出兼容目标环境的代码。其中 <code>useBuiltIns</code> 如果设为 <code>&quot;usage&quot;</code>，Babel 会根据实际代码中使用的 ES6/ES7 代码，以及与你指定的 targets，按需引入对应的 <code>polyfill</code>，而无需在代码中直接引入 <code>import '@babel/polyfill'</code>，避免输出的包过大，同时又可以放心使用各种新语法特性。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22ca0b6cf8%22%2C%22code%22%3A%22npm%20i%20babel-loader%20%40babel%2Fcore%20%40babel%2Fpreset-env%20-D%22%7D\"></card><p><br /></p><p>笔者这里配的版本号如下</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f8c05906%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%5C%22babel-loader%5C%22%3A%20%5C%22%5E8.0.4%5C%22%2C%5Cn%20%20%5C%22%40babel%2Fcore%5C%22%3A%20%5C%22%5E7.1.2%5C%22%2C%5Cn%20%20%5C%22%40babel%2Fpreset-env%5C%22%3A%20%5C%22%5E7.1.0%5C%22%5Cn%7D%22%7D\"></card><p><br /></p><ul><li><a href=\"https://www.npmjs.com/package/babel-loader\" target=\"_blank\">babel-loader</a>: 用 babel 转换 ES6 代码需要使用到 <code>babel-loader</code></li><li><a href=\"https://www.npmjs.com/package/@babel/preset-env\" target=\"_blank\">@babel-preset-env</a>： 默认情况下是等于 ES2015 + ES2016 + ES2017，也就是说它对这三个版本的 ES 语法进行转化。</li><li><a href=\"https://www.npmjs.com/package/@babel/core\" target=\"_blank\">@babel/core</a>：babel 核心库</li></ul><p><br /></p><p>根目录下新建 <code>.babelrc</code> 文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228658baf5%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%5C%22presets%5C%22%3A%20%5B%5Cn%20%20%20%20%5B%5Cn%20%20%20%20%20%20%5C%22%40babel%2Fpreset-env%5C%22%2C%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22modules%5C%22%3A%20false%2C%5Cn%20%20%20%20%20%20%20%20%5C%22targets%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22browsers%5C%22%3A%20%5B%5C%22%3E%201%25%5C%22%2C%20%5C%22last%202%20versions%5C%22%2C%20%5C%22not%20ie%20%3C%3D%208%5C%22%5D%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%5C%22useBuiltIns%5C%22%3A%20%5C%22usage%5C%22%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%5D%5Cn%7D%22%7D\"></card><p><br /></p><ul><li>presets 是一堆 plugins 的预设，起到方便的作用。</li><li>plugins 是编码转化工具，babel 会根据你配置的插件对代码进行相应的转化。</li></ul><p><br /></p><p>修改 <code>webpack.config.js</code></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223639e83c%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20module%3A%20%7B%5Cn%20%20%20%20rules%3A%20%5B%5Cn%20%20%20%20%20%20%2F%2F...%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20test%3A%20%2F%5C%5C.m%3Fjs%24%2F%2C%5Cn%20%20%20%20%20%20%20%20exclude%3A%20%2F(node_modules%7Cbower_components)%2F%2C%5Cn%20%20%20%20%20%20%20%20use%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20loader%3A%20'babel-loader'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><h4 id=\"f0b8ee03\">babel/polyfill 和 transform-runtime</h4><p><br /></p><blockquote><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。</p></blockquote><p><br /></p><ul><li>babel-polyfill: 如上述所说，对于新的 API，你可能需要引入 babel-polyfill 来进行兼容</li><li>关键点</li></ul><ul data-lake-indent=\"1\"><li>babel-polyfill 是为了模拟一个完整的 ES2015+环境，旨在用于应用程序而不是库/工具。</li><li>babel-polyfill 会污染全局作用域</li></ul><p><br /></p><p>babel-runtime 的作用：</p><p><br /></p><ul><li><strong>提取辅助函数</strong>。ES6 转码时，babel 会需要一些辅助函数，例如 _extend。babel 默认会将这些辅助函数内联到每一个 js 文件里， babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 babel-runtime 中，这样做能减小项目文件的大小。</li><li><strong>提供 polyfill</strong>：不会污染全局作用域，但是不支持实例方法如 Array.includes</li></ul><p><br /></p><p><code>babel-runtime</code> 更像是分散的 polyfill 模块，需要在各自的模块里单独引入，借助 <code>transform-runtime</code> 插件来自动化处理这一切，也就是说你不要在文件开头 import 相关的 <code>polyfill</code>，你只需使用，<code>transform-runtime</code> 会帮你引入。</p><p><br /></p><p>对于开发应用来说，直接使用上述的按需 <code>polyfill</code> 方案是比较方便的，但如果是开发工具、库的话，这种方案未必适合（<code>babel-polyfill</code> 是通过向全局对象和内置对象的 <code>prototype</code> 上添加方法实现的，会造成全局变量污染）。Babel 提供了另外一种方案 <code>transform-runtime</code>，它在编译过程中只是将需要 <code>polyfill</code> 的代码引入了一个指向 <code>core-js</code> 中对应模块的链接(alias)。关于这两个方案的具体差异和选择，可以自行搜索相关教程，这里不再展开，下面提供一个 <code>transform-runtime</code> 的参考配置方案。</p><p><br /></p><ul><li>首先安装 runtime 相关依赖</li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22956f16ce%22%2C%22code%22%3A%22npm%20i%20%40babel%2Fplugin-transform-runtime%20-D%5Cnnpm%20i%20%40babel%2Fruntime%20-S%22%7D\"></card><p><br /></p><p>修改 <code>.babelrc</code></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221bba44bd%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%2F%2F...%5Cn%20%20%5C%22plugins%5C%22%3A%20%5B%5C%22%40babel%2Fplugin-transform-runtime%5C%22%5D%5Cn%7D%22%7D\"></card><p><br /></p><h3 id=\"de6d1476\">打包前清理源目录文件 clean-webpack-plugin</h3><p><br /></p><p>每次打包，都会生成项目的静态资源，随着某些文件的增删，我们的 dist 目录下可能产生一些不再使用的静态资源，webpack 并不会自动判断哪些是需要的资源，为了不让这些旧文件也部署到生产环境上占用空间，所以在 webpack 打包前最好能清理 dist 目录。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f9619ed9%22%2C%22code%22%3A%22npm%20install%20clean-webpack-plugin%20-D%22%7D\"></card><p><br /></p><p>修改 <code>webpack.config.js</code> 文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2264d81b4e%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20CleanWebpackPlugin%20%3D%20require('clean-webpack-plugin')%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20plugins%3A%20%5Bnew%20CleanWebpackPlugin(%5B'dist'%5D)%5D%5Cn%7D%22%7D\"></card><p><br /></p><h3 id=\"b8f9cc52\">提取公用代码</h3><p><br /></p><p>假如你 <code>a.js</code> 和 <code>b.js</code> 都 import 了 <code>c.js</code> 文件，这段代码就冗杂了。为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22dc7c7e96%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20%2F%2F...%5Cn%20%20optimization%3A%20%7B%5Cn%20%20%20%20splitChunks%3A%20%7B%5Cn%20%20%20%20%20%20cacheGroups%3A%20%7B%5Cn%20%20%20%20%20%20%20%20commons%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8A%BD%E7%A6%BB%E8%87%AA%E5%B7%B1%E5%86%99%E7%9A%84%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81%5Cn%20%20%20%20%20%20%20%20%20%20chunks%3A%20'initial'%2C%5Cn%20%20%20%20%20%20%20%20%20%20name%3A%20'common'%2C%20%2F%2F%20%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%EF%BC%8C%E4%BB%BB%E6%84%8F%E5%91%BD%E5%90%8D%5Cn%20%20%20%20%20%20%20%20%20%20minChunks%3A%202%2C%20%2F%2F%E6%9C%80%E5%B0%8F%E5%BC%95%E7%94%A82%E6%AC%A1%5Cn%20%20%20%20%20%20%20%20%20%20minSize%3A%200%20%2F%2F%20%E5%8F%AA%E8%A6%81%E8%B6%85%E5%87%BA0%E5%AD%97%E8%8A%82%E5%B0%B1%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%B0%E5%8C%85%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20styles%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20name%3A%20'styles'%2C%20%2F%2F%20%E6%8A%BD%E7%A6%BB%E5%85%AC%E7%94%A8%E6%A0%B7%E5%BC%8F%5Cn%20%20%20%20%20%20%20%20%20%20test%3A%20%2F%5C%5C.css%24%2F%2C%5Cn%20%20%20%20%20%20%20%20%20%20chunks%3A%20'all'%2C%5Cn%20%20%20%20%20%20%20%20%20%20minChunks%3A%202%2C%5Cn%20%20%20%20%20%20%20%20%20%20enforce%3A%20true%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20vendor%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8A%BD%E7%A6%BB%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6%5Cn%20%20%20%20%20%20%20%20%20%20test%3A%20%2Fnode_modules%2F%2C%20%2F%2F%20%E6%8C%87%E5%AE%9A%E6%98%AFnode_modules%E4%B8%8B%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%5Cn%20%20%20%20%20%20%20%20%20%20chunks%3A%20'initial'%2C%5Cn%20%20%20%20%20%20%20%20%20%20name%3A%20'vendor'%2C%20%2F%2F%20%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%EF%BC%8C%E4%BB%BB%E6%84%8F%E5%91%BD%E5%90%8D%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%8C%E9%98%B2%E6%AD%A2%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81%E6%8F%90%E5%8F%96%E6%97%B6%E8%A2%AB%E8%A6%86%E7%9B%96%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%5Cn%20%20%20%20%20%20%20%20%20%20priority%3A%2010%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><h3 id=\"hash\">hash</h3><p><br /></p><p>hash 是干嘛用的？</p><p>我们每次打包出来的结果可能都是同一个文件，那我上线的时候是不是要替换掉上线的 js，那我怎么知道哪是最新的呢，我们一般会清一下缓存。而 hash 就是为了解决这个问题而存在的</p><p><br /></p><p>我们此时在改一些 webpack.config.js 的配置</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%224ce1652e%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20%2F%2F...%5Cn%20%20output%3A%20%7B%5Cn%20%20%20%20path%3A%20path.resolve(__dirname%2C%20'dist')%2C%5Cn%20%20%20%20filename%3A%20'%5Bname%5D.%5Bhash%3A8%5D.js'%5Cn%20%20%7D%2C%5Cn%20%20%2F%2F...%5Cn%20%20plugins%3A%20%5B%5Cn%20%20%20%20new%20MiniCssExtractPlugin(%7B%5Cn%20%20%20%20%20%20filename%3A%20'%5Bname%5D.%5Bhash%3A8%5D.css'%2C%5Cn%20%20%20%20%20%20chunkFilename%3A%20'%5Bid%5D.%5Bhash%3A8%5D.css'%5Cn%20%20%20%20%7D)%5Cn%20%20%5D%5Cn%7D%22%7D\"></card><p><br /></p><h3 id=\"d541b9ea\">减少 resolve 的解析，配置别名</h3><p><br /></p><p>如果我们可以精简 <code>resolve</code> 配置，让 <code>webpack</code> 在查询模块路径时尽可能快速地定位到需要的模块，不做额外的查询工作，那么 <code>webpack</code> 的构建速度也会快一些</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f3787e29%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20resolve%3A%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20alias%3A%20%E5%88%AB%E5%90%8D%E7%9A%84%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20extensions%3A%20%E8%87%AA%E5%8A%A8%E8%A7%A3%E6%9E%90%E7%A1%AE%E5%AE%9A%E7%9A%84%E6%89%A9%E5%B1%95%2C%5Cn%20%20%20%20%20*%20%20%20%20%E6%AF%94%E5%A6%82%20import%20'xxx%2Ftheme.css'%20%E5%8F%AF%E4%BB%A5%E5%9C%A8extensions%20%E4%B8%AD%E6%B7%BB%E5%8A%A0%20'.css'%EF%BC%8C%20%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F%E5%88%99%E4%B8%BA%20import%20'xxx%2Ftheme'%5Cn%20%20%20%20%20*%20%20%20%20%40default%20%5B'.wasm'%2C%20'.mjs'%2C%20'.js'%2C%20'.json'%5D%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20modules%20%E5%91%8A%E8%AF%89%20webpack%20%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97%E6%97%B6%E5%BA%94%E8%AF%A5%E6%90%9C%E7%B4%A2%E7%9A%84%E7%9B%AE%E5%BD%95%5Cn%20%20%20%20%20*%20%20%20%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%83%B3%E8%A6%81%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%E5%88%B0%E6%A8%A1%E5%9D%97%E6%90%9C%E7%B4%A2%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%AD%A4%E7%9B%AE%E5%BD%95%E4%BC%98%E5%85%88%E4%BA%8E%20node_modules%2F%20%E6%90%9C%E7%B4%A2%5Cn%20%20%20%20%20*%20%20%20%E8%BF%99%E6%A0%B7%E9%85%8D%E7%BD%AE%E5%9C%A8%E6%9F%90%E7%A7%8D%E7%A8%8B%E5%BA%A6%E4%B8%8A%E5%8F%AF%E4%BB%A5%E7%AE%80%E5%8C%96%E6%A8%A1%E5%9D%97%E7%9A%84%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%8F%90%E5%8D%87%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%20%40default%20node_modules%20%E4%BC%98%E5%85%88%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20alias%3A%20%7B%5Cn%20%20%20%20%20%20'%40'%3A%20path.resolve(__dirname%2C%20'src')%2C%5Cn%20%20%20%20%20%20tool%24%3A%20path.resolve(__dirname%2C%20'src%2Futils%2Ftool.js')%20%2F%2F%20%E7%BB%99%E5%AE%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%94%AE%E5%90%8E%E7%9A%84%E6%9C%AB%E5%B0%BE%E6%B7%BB%E5%8A%A0%20%24%EF%BC%8C%E4%BB%A5%E8%A1%A8%E7%A4%BA%E7%B2%BE%E5%87%86%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20extensions%3A%20%5B'.wasm'%2C%20'.mjs'%2C%20'.js'%2C%20'.json'%2C%20'.jsx'%5D%2C%5Cn%20%20%20%20modules%3A%20%5Bpath.resolve(__dirname%2C%20'src')%2C%20'node_modules'%5D%5Cn%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><h3 id=\"webpack-dev-serve\">webpack-dev-serve</h3><p><br /></p><p>上面讲到了都是如何打包文件，但是开发中我们需要一个本地服务，这时我们可以使用 <code>webpack-dev-server</code> 在本地开启一个简单的静态服务来进行开发。</p><p><br /></p><p><code>webpack-dev-server</code> 是 webpack 官方提供的一个工具，可以基于当前的 webpack 构建配置快速启动一个静态服务。当 <code>mode</code> 为 <code>development</code> 时，会具备 <code>hot reload</code> 的功能，即当源码文件变化时，会即时更新当前页面，以便你看到最新的效果。...</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%222c8ee299%22%2C%22code%22%3A%22npm%20install%20webpack-dev-server%20-D%22%7D\"></card><p><br /></p><p>package.json 中 scripts 中添加</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%225efad7ef%22%2C%22code%22%3A%22%5C%22start%5C%22%3A%20%5C%22webpack-dev-server%20--mode%20development%5C%22%22%7D\"></card><p><br /></p><p>默认开启一个本地服务的窗口 <a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080/</a> 便于开发</p><p><br /></p><h4 id=\"31c0be61\">配置开发服务器</h4><p><br /></p><p>我们可以对 <code>webpack-dev-server</code> 做针对性的配置</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22e44b8980%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20%2F%2F%20%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20devServer%3A%20%7B%5Cn%20%20%20%20port%3A%201234%2C%5Cn%20%20%20%20open%3A%20true%2C%20%2F%2F%20%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8%5Cn%20%20%20%20compress%3A%20true%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8E%8B%E7%BC%A9%5Cn%20%20%20%20%2F%2F...%20proxy%E3%80%81hot%5Cn%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><ul><li>contentBase: 服务器访问的根目录（可用于访问静态资源）</li><li>port: 端口</li><li>open: 自动打开浏览器</li></ul><p><br /></p><h3 id=\"53985000\">模块热替换(hot module replacement)</h3><p><br /></p><p>模块热替换(<code>HMR - Hot Module Replacement</code>)功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p><p><br /></p><ul><li>保留在完全重新加载页面时丢失的应用程序状态。</li><li>只更新变更内容，以节省宝贵的开发时间。</li><li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li></ul><p><br /></p><p>上面我们 <code>npm start</code> 后修改一次文件，页面就会刷新一次。这样就存在很大问题了，比如我们使用 <code>redux</code>, <code>vuex</code> 等插件，页面一刷新那么存放在 <code>redux</code>, <code>vuex</code> 中的东西就会丢失，非常不利于我们的开发。</p><p><br /></p><p>HMR 配合 webpack-dev-server ，首先我们配置下 webpack.config.js</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2208b12400%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20webpack%20%3D%20require('webpack')%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20devServer%3A%20%7B%5Cn%20%20%20%20%2F%2F...%5Cn%20%20%20%20hot%3A%20true%5Cn%20%20%7D%2C%5Cn%20%20plugins%3A%20%5B%5Cn%20%20%20%20new%20webpack.HotModuleReplacementPlugin()%5Cn%20%20%20%20%2F%2F...%5Cn%20%20%5D%5Cn%7D%22%7D\"></card><p><br /></p><p>配置后还不行，因为 webpack 还不知道你要更新哪里, 修改 <code>src/index.js</code> 文件, 添加</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b5fc71f8%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22if%20(module.hot)%20%7B%5Cn%20%20module.hot.accept()%5Cn%7D%22%7D\"></card><p><br /></p><p>重启服务，<code>npm start</code> 之后，修改引入 <code>index.js</code> 文件后，页面就不会重新刷新了，这便实现了 HMR</p><p><br /></p><p>但是但是有个问题是，你修改 css/less 等样式文件并未发生改变， what ?</p><p><br /></p><p>HMR 修改样式表 需要借助于 <code>style-loader</code>， 而我们之前用的是 <code>MiniCssExtractPlugin.loader</code>， 这也好办，修改其中一个 rules 就可以了，我们可以试试改</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22bdf67518%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20module%3A%20%7B%5Cn%20%20%20%20rules%3A%20%5B%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20test%3A%20%2F%5C%5C.less%24%2F%2C%5Cn%20%20%20%20%20%20%20%20use%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20MiniCssExtractPlugin.loader%2C%5Cn%20%20%20%20%20%20%20%20%20%20'style-loader'%2C%5Cn%20%20%20%20%20%20%20%20%20%20'css-loader'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20loader%3A%20'postcss-loader'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20plugins%3A%20%5Brequire('autoprefixer')%5D%20%2F%2F%20%E6%B7%BB%E5%8A%A0css%E4%B8%AD%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%89%8D%E7%BC%80%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20'less-loader'%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>这样我们修改 less 文件就会发现 HMR 已经实现了。</p><p><br /></p><p>其实，我们可以发现，dev 下配置的 loader 为 <code>style-loader</code> , 而生产环境下则是需要 <code>MiniCssExtractPlugin.loader</code></p><p><br /></p><p>这就涉及到了不同环境之间的配置。可以通过 <code>process.env.NODE_ENV</code> 获取当前是开发环境或者是生产环境，然后配置不同的 loader，这里就不做展开了。下一篇文章打算在做一个 <code>react-cli</code> 或者 <code>vue-cli</code> 的配置，将开发环境的配置与生产环境的配置分开为不同的文件。</p><p><br /></p><h3 id=\"433531fd\">结语</h3><p><br /></p><p>前面讲到的知识都是 webpack 的一些基础的知识，更多的资料可以查询<a href=\"https://webpack.js.org/\" target=\"_blank\">webpack 中文官网</a>，官网讲的比较详细，我这里也是讲最常的配置，也是一篇入门系列的文章，文中涉及的知识点还有很多地方还需要完善，譬如 优化 webpack 的构建速度， 减小打包的体积等等。</p><p><br /></p><p>学习 <code>webpack 4.0</code> 还需要多实践，多瞎搞，笔者也是刚刚学习 webpack 的配置，不对之处请各位指出。</p><p><br /></p><p>下一篇文章打算从零配置一个脚手架，以加深自己对 webpack 的理解。</p><p><br /></p><p>本文产生的代码：<a href=\"https://github.com/gershonv/my-code-store/tree/master/webpack/webpack-dev\" target=\"_blank\">webpack-dev</a></p><p><br /></p><h3 id=\"d17a0f0b\">参考</h3><p><br /></p><ul><li><a href=\"https://juejin.im/post/5b2b9a00e51d45587b48075e#heading-0\" target=\"_blank\">webpack4.x 入门一篇足矣</a></li><li><a href=\"https://segmentfault.com/a/1190000014466696?utm_source=index-hottest/*&amp;%5E%25$#articleHeader0\" target=\"_blank\">Webpack4 不深不浅的实践教程</a></li><li><a href=\"https://juejin.im/post/5b3834e051882574ce2f3dd9\" target=\"_blank\">webpack 之 babel 配置和 HMR</a></li><li><a href=\"https://segmentfault.com/a/1190000015247255\" target=\"_blank\">使用 webpack 4 和 Babel 7 配置 Vue.js 工程模板</a></li><li><a href=\"https://juejin.im/post/5b3daf2ee51d451962727fbe\" target=\"_blank\">webpack 4 ：从 0 配置到项目搭建</a></li><li><a href=\"https://juejin.im/post/5aa3d2056fb9a028c36868aa\" target=\"_blank\">webpack 详解</a></li><li><a href=\"https://juejin.im/post/5b4609f5e51d4519596b66a7\" target=\"_blank\">手写一个 webpack4.0 配置</a></li><li><a href=\"https://juejin.im/entry/5b552985f265da0f697036b2\" target=\"_blank\">Webpack 4 教程：从零配置到生产发布（2018）</a></li><li><a href=\"https://juejin.im/post/5badd0c5e51d450e4437f07a\" target=\"_blank\">Webpack 揭秘——走向高阶前端的必经之路</a></li><li><a href=\"https://www.bilibili.com/video/av25439651?from=search&amp;seid=14183256954711376795\" target=\"_blank\">珠峰架构师培训公开课 webpack4.0 进阶</a></li><li><a href=\"https://webpack.js.org/\" target=\"_blank\">webpack 官网</a></li></ul><p><br /></p>",
  "body_draft_lake": "",
  "public": 1,
  "status": 0,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2020-11-12T12:28:27.000Z",
  "deleted_at": null,
  "created_at": "2019-04-02T02:42:16.000Z",
  "updated_at": "2023-02-02T09:07:58.000Z",
  "published_at": "2019-04-02T02:45:19.000Z",
  "first_published_at": "2019-04-02T02:45:19.000Z",
  "word_count": 5842,
  "cover": null,
  "description": "什么是 webpackwebpack 可以看做是模块打包机：他做的事情是，分析你的项目结构，找到 JavaScript 模块以及其他的一些浏览器不能直接运行的扩展语言（Scss、TypeScript 等），将其打包为合适的格式以供浏览器使用构建就是把源代码转换成发布到线上可执行的 JavaSc...",
  "custom_description": null,
  "hits": 92,
  "_serializer": "v2.doc_detail"
}