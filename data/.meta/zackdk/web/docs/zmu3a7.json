{
  "id": 3898901,
  "slug": "zmu3a7",
  "title": "JS知识点之神奇的闭包",
  "book_id": 231593,
  "book": {
    "id": 231593,
    "type": "Book",
    "slug": "web",
    "name": "WEB",
    "user_id": 284138,
    "description": "前端知识点记录",
    "creator_id": 284138,
    "public": 1,
    "items_count": 58,
    "likes_count": 0,
    "watches_count": 3,
    "content_updated_at": "2023-02-02T09:09:21.426Z",
    "updated_at": "2023-02-02T09:09:21.000Z",
    "created_at": "2019-03-07T05:05:08.000Z",
    "namespace": "zackdk/web",
    "user": {
      "id": 284138,
      "type": "User",
      "login": "zackdk",
      "name": "行一度空山",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
      "books_count": 2,
      "public_books_count": 1,
      "followers_count": 5,
      "following_count": 0,
      "created_at": "2019-03-07T05:02:38.000Z",
      "updated_at": "2023-02-01T12:18:25.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 284138,
  "creator": {
    "id": 284138,
    "type": "User",
    "login": "zackdk",
    "name": "行一度空山",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1551934932702-d412771d-8d33-4694-9186-a749a3b4e05b.jpeg",
    "books_count": 2,
    "public_books_count": 1,
    "followers_count": 5,
    "following_count": 0,
    "created_at": "2019-03-07T05:02:38.000Z",
    "updated_at": "2023-02-01T12:18:25.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"usF9A\"></a>\n## 1.定义\n> 函数与对其状态即**词法环境**（**lexical environment**）的引用共同构成**闭包**（**closure**）。[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n\n<br />\n> A closure is a pair consisting of the **function code** and the **environment** in which the function is created.[链接](http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-1-lexical-environments-common-theory/#static-lexical-scope)\n\n\n\n最开始看这个定义的时候，不知所云。当随着对闭包的理解，看这个定义就觉得简练而准确。这两个定义，是我现在比较认同的定义。\n\n定义提到了两个东西 **函数本身 **和 **定义函数时的词法环境**。\n\n\n函数本身，比较简单，就是定义函数时写的代码。<br />词法环境，也叫[静态作用域](https://baike.baidu.com/item/%E9%9D%99%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F/7794656?fr=aladdin)，简单来说，就是你定义函数时，函数内部使用的变量是根据你书写代码的位置来确定的，而不是根据调用来确定的。函数的外部作用域之所以被闭包保存下来，是用于将来函数执行时的变量查找。\n\n[语雀内容](https://www.yuque.com/zackdk/web/uikgt9?inner=d5519b00&view=doc_embed)\n\n\n<a name=\"8ufke\"></a>\n## 2.理解\n\njs里函数是头等公民“first-class”，意味着函数可以作为参数传递进另一个函数，可以作为函数的返回值返回。本来是没什么问题的，但当函数内部还存在自由变量时，这就会导致一个很经典的问题[Funarg problem]()。\n\n<a name=\"WIO6s\"></a>\n### 自由变量\n除了以下两种，函数参数，函数内部定义的变量，之外的变量。\n\n<a name=\"hS3ae\"></a>\n### Funarg Problem\n这个还细分为两个子类：<br />当函数作为参数传进另一个函数的时候。一般称为**_downward funarg problem。_**<br />当函数作为返回值的时候。一般称为**_upward funarg problem__。_**\n\n1.**_downward funarg problem_**<br />**\n```javascript\nlet x = 10;\n \nfunction foo() {\n  console.log(x);\n}\n \nfunction bar(funArg) {\n  let x = 20;\n  funArg(); // 10, not 20!\n}\n \n// Pass `foo` as an argument to `bar`.\nbar(foo);\n```\n\n对于函数foo来说，x是自由变量。当函数调用的时候（通过funArg），x应该如何解析呢，是定义时候的外部作用域里去找，还是执行时的作用域呢？此时变量的查找就会存在多义性。\n\nJS采用词法作用域来避免这个多义性，使用[[Scope]]来保存这个词法作用域的引用。<br />这一手段其实就是闭包的核心，在创建函数的时候，保存以词法作用域为准的父作用域的引用，用以将来函数调用时进行变量查找。\n\n_2._**_upward funarg problem_**<br />**\n```javascript\nfunction foo() {\n  let x = 10;\n   \n  // Closure, capturing environment of `foo`.\n  function bar() {\n    return x;\n  }\n \n  // Upward funarg.\n  return bar;\n}\n \nlet x = 20;\n \n// Call to `foo` returns `bar` closure.\nlet bar = foo();\n \nbar(); // 10, not 20!\n\n```\n\n正常来说，函数执行完毕后，函数会被回收掉。所以当foo执行完毕后，foo就被回收掉了。此时bar的父环境作用域已经不存在了，如果bar函数中依赖父环境中的变量，那么函数执行结果就不会符合预期了。\n\n由于JS中闭包的存在，foo执行完毕后，并没有释放而是被bar函数引用，而保留下来了。所以这个问题也就迎刃而解了。\n\n<a name=\"RPGAe\"></a>\n### 小结\n\n\n\n那闭包到底是个什么东西呢？<br />首先你得明白两个名词 ，词法作用域和自由变量。<br />然后JS里函数是可以作为变量传递的，那就意味着1.函数可以作为参数传递进另一个函数，2.函数可以作为另一个函数的返回值返回出去。先抛开静态作用域和闭包，就可以发现函数式语言的经典问题，funarg problem。\n\n针对第一种情况，作为参数传入另一个函数。那就意味着函数定义的地方和函数执行的地方不一定是一个作用域，很可能是两个作用域。那么这个时候如果函数内部存在自由变量，该去那个作用域里查找变量呢?这时便存在二义性。<br />JS里采用了词法作用域，来消除这个二义性，即自由变量的值由函数定义时的作用域查找而来。这只是确定了规则，还无法实施，既然要在定义时的作用域里查找，那么就需要把这个作用域的引用保存下来，如何保存呢？JS里在定义函数的时候有一个隐藏属性叫[[scope]]，就是用来指向作用域的。这就是我理解的闭包背后所做的事情了，保留函数定义时的作用域用于自由变量的查找。\n\n第二种情况，其实也差不多，函数作为另一个函数的返回值。正常来说函数执行完毕，会立即释放。那么要是返回的函数依赖于已经释放的变量，那么返回的函数执行的时候就会有问题。解决的方法同样是闭包 ，这种情况，由于作为返回值的函数持有定义时作用域的引用，所以函数执行完了，并没有释放，而是保留下来了。\n\n所以闭包是什么，我个人认为说闭包是一种解决funarg的技术手段更合理一些，这也是导致我们经常感觉说不清楚 闭包是什么的原因。看完这乱起八糟的一团，我也觉得文章最开始给的那个定义也蛮合适的。闭包是由函数代码和其外部作用域的引用共同构成的。\n\n综上所述，可以看出闭包和词法作用域，的确是解决了funarg问题。但为什么一定是闭包和词法作用域呢？可以是其它的手段么？\n\njs里只有全局作用域和函数作用域（ES5）,函数定义的时候，就持有了一个全局作用域的引用，这个意义上所有函数都使用了闭包。\n\n<a name=\"k4oLo\"></a>\n## 3.作用\n\n1.私有变量<br />2.模块化\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5D%2C%22active%22%3Atrue%7D\"><h2 id=\"usF9A\" data-lake-id=\"5253f8bae7330ac1bc44ca1f38dc5d37_h2_0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">1.定义</h2><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"fae220ff2833a01c2cd51789d69cc87b_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px;\" data-mce-style=\"font-size: 12px\">函数与对其状态即</span><strong>词法环境</strong><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px;\" data-mce-style=\"font-size: 12px\">（</span><strong>lexical environment</strong><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px;\" data-mce-style=\"font-size: 12px\">）的引用共同构成</span><strong>闭包</strong><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px;\" data-mce-style=\"font-size: 12px\">（</span><strong>closure</strong><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px;\" data-mce-style=\"font-size: 12px\">）。<a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">mdn</a></span></p></blockquote><p data-lake-id=\"4838965d80065e01b01bcecbc05930c6_p_1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px;\" data-mce-style=\"font-size: 12px\"><br></span></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"bbffae6da32385ea7d6f797ddc2023ae_p_2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">A&nbsp;closure&nbsp;is a&nbsp;pair&nbsp;consisting of the <strong>function&nbsp;code</strong>&nbsp;and the&nbsp;<strong>environment</strong>&nbsp;in which the function is&nbsp;created.<a target=\"_blank\" href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-1-lexical-environments-common-theory/#static-lexical-scope\">链接</a></p></blockquote><p data-lake-id=\"804b58e6d41ad7fb2480630c3092516e_p_3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px;\" data-mce-style=\"font-size: 12px\"><br></span></p><p data-lake-id=\"6072659cb909b6c8de7c09fd8326d9bd_p_4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">最开始看这个定义的时候，不知所云。当随着对闭包的理解，看这个定义就觉得简练而准确。这两个定义，是我现在比较认同的定义。</p><p data-lake-id=\"7467903a77e4c43e92d4f196903d0bbe_p_5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"0b66d4a9bb0d911ed10e311653ac4390_p_6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">定义提到了两个东西 <strong>函数本身 </strong>和 <strong>定义函数时的词法环境</strong>。</p><p data-lake-id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"7b5d75c7ae3e772462ab8e473f5db16b_p_9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">函数本身，比较简单，就是定义函数时写的代码。</p><p data-lake-id=\"1ec80ebd2e1fc119c42145a980b8b2ed_p_10\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">词法环境，也叫<a href=\"https://baike.baidu.com/item/%E9%9D%99%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F/7794656?fr=aladdin\" target=\"_blank\">静态作用域</a>，简单来说，就是你定义函数时，函数内部使用的变量是根据你书写代码的位置来确定的，而不是根据调用来确定的。函数的外部作用域之所以被闭包保存下来，是用于将来函数执行时的变量查找。</p><p data-lake-id=\"828bea0262f636b25c97fbef525aed20_p_11\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"yuque\" id=\"qXEhA\"><span>Here is yuque doc card, click on the link to view:</span><a href=\"https://www.yuque.com/zackdk/web/uikgt9#d5519b00\" style=\"\n    word-wrap: break-word;\n    color: #096DD9;\n    touch-action: manipulation;\n    background-color: rgba(0,0,0,0);\n    text-decoration: none;\n    outline: none;\n    cursor: pointer;\n    transition: color .3s;\n  \">https://www.yuque.com/zackdk/web/uikgt9#d5519b00</a></div><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"2369fafe89fae403079018df6f36b51b_p_13\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"8ufke\" data-lake-id=\"7ac6303440454334ba65f6e23bdb39c6_h2_1\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span style=\"background-color: transparent;\">2.理解</span></h2><p data-lake-id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"c82eedfe7c9bc4352cde31eb626da152_p_15\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">js里函数是头等公民“first-class”，意味着函数可以作为参数传递进另一个函数，可以作为函数的返回值返回。本来是没什么问题的，但当函数内部还存在自由变量时，这就会导致一个很经典的问题<span><a href=\"\">Funarg problem</a>。</span></p><p data-lake-id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"WIO6s\" data-lake-id=\"994de15fee63ce18ace25dee206587e1_h3_0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">自由变量</h3><p data-lake-id=\"0d35fdcdee2e0e2ee1deea30249564b8_p_17\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"background-color: transparent;\"><span>除了以下两种，函数参数，函数内部定义的变量，之外的变量。</span></span></p><p data-lake-id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"hS3ae\" data-lake-id=\"70b68b518e338aea9a25a67349d4ff1b_h3_1\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">Funarg Problem</h3><p data-lake-id=\"fa5ca7f91ff93d528861de44981363d6_p_19\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这个还细分为两个子类：</p><p data-lake-id=\"b43dbcf2a7aa22514dcb58be0021e157_p_20\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当函数作为参数传进另一个函数的时候。一般称为<strong><em><span>downward funarg problem。</span></em></strong></p><p data-lake-id=\"e21ecb8949cc5a50d2cc20a752c57c13_p_21\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当函数作为返回值的时候。一般称为<strong><em><span>upward funarg problem</span></em></strong><strong><em><span>。</span></em></strong></p><p data-lake-id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"f879f8e113f61e2e6e871db0e1aef375_p_23\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.<strong><em>downward funarg problem</em></strong></p><p data-lake-id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><em><br></em></strong></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"DwJV8\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">10</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">foo</span>() {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">log</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bar</span>(<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">funArg</span>) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">20</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">funArg</span>(); <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 10, not 20!</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Pass `foo` as an argument to `bar`.</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bar</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">foo</span>);</span></span></pre></div></div></div><p data-lake-id=\"3afe72986fc83f6913935faccbcf69b2_p_25\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"7d9b520cc14b170d06cfc9a1adf96aa0_p_26\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">对于函数foo来说，x是自由变量。当函数调用的时候（通过funArg），x应该如何解析呢，是定义时候的外部作用域里去找，还是执行时的作用域呢？此时变量的查找就会存在多义性。</p><p data-lake-id=\"4cc44302cfe9be1836a49b383f7e914f_p_27\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"944f65a9fe363dcdc15e4a46bb641a61_p_28\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JS采用词法作用域来避免这个多义性，使用[[Scope]]来保存这个词法作用域的引用。</p><p data-lake-id=\"77551dbcff29bacbf41284eafa1cf736_p_29\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这一手段其实就是闭包的核心，在创建函数的时候，保存以词法作用域为准的父作用域的引用，用以将来函数调用时进行变量查找。</p><p data-lake-id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"21c4482a063ce75fbf3bb0a7a8a7fcd5_p_31\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><em>2.</em><strong><em>upward funarg problem</em></strong></p><p data-lake-id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><em><br></em></strong></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"JgVnf\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">foo</span>() {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">10</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Closure, capturing environment of `foo`.</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bar</span>() {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Upward funarg.</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bar</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">20</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Call to `foo` returns `bar` closure.</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bar</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">foo</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bar</span>(); <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 10, not 20!</span>\n</span></span></pre></div></div></div><p data-lake-id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"c1345448809cbcfe49cb16b31b3b2777_p_34\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">正常来说，函数执行完毕后，函数会被回收掉。所以当foo执行完毕后，foo就被回收掉了。此时bar的父环境作用域已经不存在了，如果bar函数中依赖父环境中的变量，那么函数执行结果就不会符合预期了。</p><p data-lake-id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"22538fdbf0a10c51ee22c5b9ce91a9df_p_36\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">由于JS中闭包的存在，foo执行完毕后，并没有释放而是被bar函数引用，而保留下来了。所以这个问题也就迎刃而解了。</p><p data-lake-id=\"ab57135091a86c42cc63ec67ac068a45_p_37\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"RPGAe\" data-lake-id=\"28ae9a31388d9eb9a3396cdbf034e7b1_h3_2\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">小结</h3><p data-lake-id=\"82f45866a429f6224b2e92c65bfda254_p_38\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"background-color: transparent;\"><br></span></p><p data-lake-id=\"506a4dbec8e64043446f6939c0df93b7_p_40\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">那闭包到底是个什么东西呢？</p><p data-lake-id=\"c662b0a5e69c829d7b76841ae3241900_p_41\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">首先你得明白两个名词 ，词法作用域和自由变量。</p><p data-lake-id=\"357d882a68562e0d29f23020288e85bc_p_42\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">然后JS里函数是可以作为变量传递的，那就意味着1.函数可以作为参数传递进另一个函数，2.函数可以作为另一个函数的返回值返回出去。先抛开静态作用域和闭包，就可以发现函数式语言的经典问题，funarg problem。</p><p data-lake-id=\"4930f2b57b08d977b4a7a79433f23490_p_43\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"426c04f276f1f974bf1a77df36a22541_p_44\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">针对第一种情况，作为参数传入另一个函数。那就意味着函数定义的地方和函数执行的地方不一定是一个作用域，很可能是两个作用域。那么这个时候如果函数内部存在自由变量，该去那个作用域里查找变量呢?这时便存在二义性。</p><p data-lake-id=\"9a69c75f7cd93f64a0de9f18bc2b7500_p_45\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JS里采用了词法作用域，来消除这个二义性，即自由变量的值由函数定义时的作用域查找而来。这只是确定了规则，还无法实施，既然要在定义时的作用域里查找，那么就需要把这个作用域的引用保存下来，如何保存呢？JS里在定义函数的时候有一个隐藏属性叫[[scope]]，就是用来指向作用域的。这就是我理解的闭包背后所做的事情了，保留函数定义时的作用域用于自由变量的查找。</p><p data-lake-id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"9eb1680fc4a79dda37b4fa09e1b9dd52_p_47\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">第二种情况，其实也差不多，函数作为另一个函数的返回值。正常来说函数执行完毕，会立即释放。那么要是返回的函数依赖于已经释放的变量，那么返回的函数执行的时候就会有问题。解决的方法同样是闭包 ，这种情况，由于作为返回值的函数持有定义时作用域的引用，所以函数执行完了，并没有释放，而是保留下来了。</p><p data-lake-id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"758abb9715703fb6d23d1791b2f4a347_p_49\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">所以闭包是什么，我个人认为说闭包是一种解决funarg的技术手段更合理一些，这也是导致我们经常感觉说不清楚 闭包是什么的原因。看完这乱起八糟的一团，我也觉得文章最开始给的那个定义也蛮合适的。闭包是由函数代码和其外部作用域的引用共同构成的。</p><p data-lake-id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"82687266ce504d29d50a3f3280b726f1_p_51\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">综上所述，可以看出闭包和词法作用域，的确是解决了funarg问题。但为什么一定是闭包和词法作用域呢？可以是其它的手段么？</p><p data-lake-id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"89c126390f278c0574ce7192c4563910_p_53\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"background-color: transparent;\"><span>js里只有全局作用域和函数作用域（ES5）,函数定义的时候，就持有了一个全局作用域的引用，这个意义上所有函数都使用了闭包。</span></span></p><p data-lake-id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"background-color: transparent;\"><span><br></span></span></p><p data-lake-id=\"7188e3d4590c731c34019643bbb3ba96_p_55\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"k4oLo\" data-lake-id=\"7fb63afbf13a1a33c6e6aba3a954aee1_h2_2\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">3.作用</h2><p data-lake-id=\"67592880a847e874a0da3af4d564ef1f_p_57\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"fb37b05423822069b9bd75c5bd5fb407_p_58\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.私有变量</p><p data-lake-id=\"d1c7cbd325022a7245b91fe917f2e6f7_p_59\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.模块化</p><p data-lake-id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><h2 id=\"usF9A\" data-lake-id=\"5253f8bae7330ac1bc44ca1f38dc5d37_h2_0\">1.定义</h2><blockquote><p data-lake-id=\"fae220ff2833a01c2cd51789d69cc87b_p_0\"><span class=\"lake-fontsize-12\" style=\"color: #333333;\">函数与对其状态即</span><strong>词法环境</strong><span class=\"lake-fontsize-12\" style=\"color: #333333;\">（</span><strong>lexical environment</strong><span class=\"lake-fontsize-12\" style=\"color: #333333;\">）的引用共同构成</span><strong>闭包</strong><span class=\"lake-fontsize-12\" style=\"color: #333333;\">（</span><strong>closure</strong><span class=\"lake-fontsize-12\" style=\"color: #333333;\">）。<a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">mdn</a></span></p></blockquote><p data-lake-id=\"4838965d80065e01b01bcecbc05930c6_p_1\"><span class=\"lake-fontsize-12\" style=\"color: #333333;\"><br /></span></p><blockquote><p data-lake-id=\"bbffae6da32385ea7d6f797ddc2023ae_p_2\">A closure is a pair consisting of the <strong>function code</strong> and the <strong>environment</strong> in which the function is created.<a target=\"_blank\" href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-1-lexical-environments-common-theory/#static-lexical-scope\">链接</a></p></blockquote><p data-lake-id=\"804b58e6d41ad7fb2480630c3092516e_p_3\"><span class=\"lake-fontsize-12\" style=\"color: #333333;\"><br /></span></p><p data-lake-id=\"6072659cb909b6c8de7c09fd8326d9bd_p_4\">最开始看这个定义的时候，不知所云。当随着对闭包的理解，看这个定义就觉得简练而准确。这两个定义，是我现在比较认同的定义。</p><p data-lake-id=\"7467903a77e4c43e92d4f196903d0bbe_p_5\"><br /></p><p data-lake-id=\"0b66d4a9bb0d911ed10e311653ac4390_p_6\">定义提到了两个东西 <strong>函数本身 </strong>和 <strong>定义函数时的词法环境</strong>。</p><p data-lake-id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\"><br /></p><p data-lake-id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\"><br /></p><p data-lake-id=\"7b5d75c7ae3e772462ab8e473f5db16b_p_9\">函数本身，比较简单，就是定义函数时写的代码。</p><p data-lake-id=\"1ec80ebd2e1fc119c42145a980b8b2ed_p_10\">词法环境，也叫<a href=\"https://baike.baidu.com/item/%E9%9D%99%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F/7794656?fr=aladdin\" target=\"_blank\">静态作用域</a>，简单来说，就是你定义函数时，函数内部使用的变量是根据你书写代码的位置来确定的，而不是根据调用来确定的。函数的外部作用域之所以被闭包保存下来，是用于将来函数执行时的变量查找。</p><p data-lake-id=\"828bea0262f636b25c97fbef525aed20_p_11\"><br /></p><card type=\"block\" name=\"yuque\" value=\"data:%7B%22id%22%3A%22qXEhA%22%2C%22url%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fzackdk%2Fweb%2Fuikgt9%3Finner%3Dd5519b00%26view%3Ddoc_embed%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fzackdk%2Fweb%2Fuikgt9%23d5519b00%22%2C%22height%22%3A423%7D\"></card><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\"><br /></p><p data-lake-id=\"2369fafe89fae403079018df6f36b51b_p_13\"><br /></p><h2 id=\"8ufke\" data-lake-id=\"7ac6303440454334ba65f6e23bdb39c6_h2_1\"><span style=\"background-color: transparent;\">2.理解</span></h2><p data-lake-id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\"><br /></p><p data-lake-id=\"c82eedfe7c9bc4352cde31eb626da152_p_15\">js里函数是头等公民“first-class”，意味着函数可以作为参数传递进另一个函数，可以作为函数的返回值返回。本来是没什么问题的，但当函数内部还存在自由变量时，这就会导致一个很经典的问题<span><a href=\"\">Funarg problem</a>。</span></p><p data-lake-id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\"><br /></p><h3 id=\"WIO6s\" data-lake-id=\"994de15fee63ce18ace25dee206587e1_h3_0\">自由变量</h3><p data-lake-id=\"0d35fdcdee2e0e2ee1deea30249564b8_p_17\"><span style=\"background-color: transparent;\"><span>除了以下两种，函数参数，函数内部定义的变量，之外的变量。</span></span></p><p data-lake-id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\"><br /></p><h3 id=\"hS3ae\" data-lake-id=\"70b68b518e338aea9a25a67349d4ff1b_h3_1\">Funarg Problem</h3><p data-lake-id=\"fa5ca7f91ff93d528861de44981363d6_p_19\">这个还细分为两个子类：</p><p data-lake-id=\"b43dbcf2a7aa22514dcb58be0021e157_p_20\">当函数作为参数传进另一个函数的时候。一般称为<strong><em><span>downward funarg problem。</span></em></strong></p><p data-lake-id=\"e21ecb8949cc5a50d2cc20a752c57c13_p_21\">当函数作为返回值的时候。一般称为<strong><em><span>upward funarg problem</span></em></strong><strong><em><span>。</span></em></strong></p><p data-lake-id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\"><br /></p><p data-lake-id=\"f879f8e113f61e2e6e871db0e1aef375_p_23\">1.<strong><em>downward funarg problem</em></strong></p><p data-lake-id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\"><strong><em><br /></em></strong></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20x%20%3D%2010%3B%5Cn%20%5Cnfunction%20foo()%20%7B%5Cn%20%20console.log(x)%3B%5Cn%7D%5Cn%20%5Cnfunction%20bar(funArg)%20%7B%5Cn%20%20let%20x%20%3D%2020%3B%5Cn%20%20funArg()%3B%20%2F%2F%2010%2C%20not%2020!%5Cn%7D%5Cn%20%5Cn%2F%2F%20Pass%20%60foo%60%20as%20an%20argument%20to%20%60bar%60.%5Cnbar(foo)%3B%22%2C%22id%22%3A%22DwJV8%22%7D\"></card><p data-lake-id=\"3afe72986fc83f6913935faccbcf69b2_p_25\"><br /></p><p data-lake-id=\"7d9b520cc14b170d06cfc9a1adf96aa0_p_26\">对于函数foo来说，x是自由变量。当函数调用的时候（通过funArg），x应该如何解析呢，是定义时候的外部作用域里去找，还是执行时的作用域呢？此时变量的查找就会存在多义性。</p><p data-lake-id=\"4cc44302cfe9be1836a49b383f7e914f_p_27\"><br /></p><p data-lake-id=\"944f65a9fe363dcdc15e4a46bb641a61_p_28\">JS采用词法作用域来避免这个多义性，使用[[Scope]]来保存这个词法作用域的引用。</p><p data-lake-id=\"77551dbcff29bacbf41284eafa1cf736_p_29\">这一手段其实就是闭包的核心，在创建函数的时候，保存以词法作用域为准的父作用域的引用，用以将来函数调用时进行变量查找。</p><p data-lake-id=\"d657ac1e4c3211af4f7dcea889518735_p_30\"><br /></p><p data-lake-id=\"21c4482a063ce75fbf3bb0a7a8a7fcd5_p_31\"><em>2.</em><strong><em>upward funarg problem</em></strong></p><p data-lake-id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\"><strong><em><br /></em></strong></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20foo()%20%7B%5Cn%20%20let%20x%20%3D%2010%3B%5Cn%20%20%20%5Cn%20%20%2F%2F%20Closure%2C%20capturing%20environment%20of%20%60foo%60.%5Cn%20%20function%20bar()%20%7B%5Cn%20%20%20%20return%20x%3B%5Cn%20%20%7D%5Cn%20%5Cn%20%20%2F%2F%20Upward%20funarg.%5Cn%20%20return%20bar%3B%5Cn%7D%5Cn%20%5Cnlet%20x%20%3D%2020%3B%5Cn%20%5Cn%2F%2F%20Call%20to%20%60foo%60%20returns%20%60bar%60%20closure.%5Cnlet%20bar%20%3D%20foo()%3B%5Cn%20%5Cnbar()%3B%20%2F%2F%2010%2C%20not%2020!%5Cn%22%2C%22id%22%3A%22JgVnf%22%2C%22height%22%3A390%7D\"></card><p data-lake-id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\"><br /></p><p data-lake-id=\"c1345448809cbcfe49cb16b31b3b2777_p_34\">正常来说，函数执行完毕后，函数会被回收掉。所以当foo执行完毕后，foo就被回收掉了。此时bar的父环境作用域已经不存在了，如果bar函数中依赖父环境中的变量，那么函数执行结果就不会符合预期了。</p><p data-lake-id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\"><br /></p><p data-lake-id=\"22538fdbf0a10c51ee22c5b9ce91a9df_p_36\">由于JS中闭包的存在，foo执行完毕后，并没有释放而是被bar函数引用，而保留下来了。所以这个问题也就迎刃而解了。</p><p data-lake-id=\"ab57135091a86c42cc63ec67ac068a45_p_37\"><br /></p><h3 id=\"RPGAe\" data-lake-id=\"28ae9a31388d9eb9a3396cdbf034e7b1_h3_2\">小结</h3><p data-lake-id=\"82f45866a429f6224b2e92c65bfda254_p_38\"><br /></p><p data-lake-id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\"><span style=\"background-color: transparent;\"><br /></span></p><p data-lake-id=\"506a4dbec8e64043446f6939c0df93b7_p_40\">那闭包到底是个什么东西呢？</p><p data-lake-id=\"c662b0a5e69c829d7b76841ae3241900_p_41\">首先你得明白两个名词 ，词法作用域和自由变量。</p><p data-lake-id=\"357d882a68562e0d29f23020288e85bc_p_42\">然后JS里函数是可以作为变量传递的，那就意味着1.函数可以作为参数传递进另一个函数，2.函数可以作为另一个函数的返回值返回出去。先抛开静态作用域和闭包，就可以发现函数式语言的经典问题，funarg problem。</p><p data-lake-id=\"4930f2b57b08d977b4a7a79433f23490_p_43\"><br /></p><p data-lake-id=\"426c04f276f1f974bf1a77df36a22541_p_44\">针对第一种情况，作为参数传入另一个函数。那就意味着函数定义的地方和函数执行的地方不一定是一个作用域，很可能是两个作用域。那么这个时候如果函数内部存在自由变量，该去那个作用域里查找变量呢?这时便存在二义性。</p><p data-lake-id=\"9a69c75f7cd93f64a0de9f18bc2b7500_p_45\">JS里采用了词法作用域，来消除这个二义性，即自由变量的值由函数定义时的作用域查找而来。这只是确定了规则，还无法实施，既然要在定义时的作用域里查找，那么就需要把这个作用域的引用保存下来，如何保存呢？JS里在定义函数的时候有一个隐藏属性叫[[scope]]，就是用来指向作用域的。这就是我理解的闭包背后所做的事情了，保留函数定义时的作用域用于自由变量的查找。</p><p data-lake-id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\"><br /></p><p data-lake-id=\"9eb1680fc4a79dda37b4fa09e1b9dd52_p_47\">第二种情况，其实也差不多，函数作为另一个函数的返回值。正常来说函数执行完毕，会立即释放。那么要是返回的函数依赖于已经释放的变量，那么返回的函数执行的时候就会有问题。解决的方法同样是闭包 ，这种情况，由于作为返回值的函数持有定义时作用域的引用，所以函数执行完了，并没有释放，而是保留下来了。</p><p data-lake-id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\"><br /></p><p data-lake-id=\"758abb9715703fb6d23d1791b2f4a347_p_49\">所以闭包是什么，我个人认为说闭包是一种解决funarg的技术手段更合理一些，这也是导致我们经常感觉说不清楚 闭包是什么的原因。看完这乱起八糟的一团，我也觉得文章最开始给的那个定义也蛮合适的。闭包是由函数代码和其外部作用域的引用共同构成的。</p><p data-lake-id=\"4108a5bc411c7547dc6876b612b07f81_p_50\"><br /></p><p data-lake-id=\"82687266ce504d29d50a3f3280b726f1_p_51\">综上所述，可以看出闭包和词法作用域，的确是解决了funarg问题。但为什么一定是闭包和词法作用域呢？可以是其它的手段么？</p><p data-lake-id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\"><br /></p><p data-lake-id=\"89c126390f278c0574ce7192c4563910_p_53\"><span style=\"background-color: transparent;\"><span>js里只有全局作用域和函数作用域（ES5）,函数定义的时候，就持有了一个全局作用域的引用，这个意义上所有函数都使用了闭包。</span></span></p><p data-lake-id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\"><span style=\"background-color: transparent;\"><span><br /></span></span></p><p data-lake-id=\"7188e3d4590c731c34019643bbb3ba96_p_55\"><br /></p><p data-lake-id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\"><br /></p><h2 id=\"k4oLo\" data-lake-id=\"7fb63afbf13a1a33c6e6aba3a954aee1_h2_2\">3.作用</h2><p data-lake-id=\"67592880a847e874a0da3af4d564ef1f_p_57\"><br /></p><p data-lake-id=\"fb37b05423822069b9bd75c5bd5fb407_p_58\">1.私有变量</p><p data-lake-id=\"d1c7cbd325022a7245b91fe917f2e6f7_p_59\">2.模块化</p><p data-lake-id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\"><br /></p>",
  "body_draft_lake": "",
  "public": 1,
  "status": 0,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2020-10-20T03:48:11.000Z",
  "deleted_at": null,
  "created_at": "2019-12-30T05:48:05.000Z",
  "updated_at": "2020-10-20T03:48:11.000Z",
  "published_at": "2020-10-13T10:08:32.000Z",
  "first_published_at": "2019-12-30T09:14:30.000Z",
  "word_count": 1644,
  "cover": null,
  "description": "1.定义函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。mdnA closure is a pair consisting of the function code and the environment in which the fun...",
  "custom_description": null,
  "hits": 24,
  "_serializer": "v2.doc_detail"
}